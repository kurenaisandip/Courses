1
00:00:00,920 --> 00:00:04,760
We now have a pretty good idea about how to get started with TerraForm.

2
00:00:05,360 --> 00:00:11,420
We have learned how to write simple configuration files using SQL, declare and use variables, use

3
00:00:11,420 --> 00:00:14,570
reference expressions and link resources together.

4
00:00:15,290 --> 00:00:21,380
Now let's get introduced to TerraForm State and see what really happens under the hood when we run TerraForm

5
00:00:21,380 --> 00:00:23,480
commands to provision infrastructure.

6
00:00:24,540 --> 00:00:29,340
Before we understand our form state, let us see the TerraForm workflow once again.

7
00:00:30,340 --> 00:00:35,260
We have a configuration files in a directory called TerraForm Dash local file.

8
00:00:36,110 --> 00:00:41,650
The mantra from configuration with the resource blocks is defined in the file called Main F.

9
00:00:42,080 --> 00:00:46,550
The variables used are defined inside the file called variables F.

10
00:00:47,380 --> 00:00:50,890
At this point, we do not have the local file resource created.

11
00:00:52,010 --> 00:00:56,390
First we'll run the TerraForm Init command to download the necessary plugins.

12
00:00:57,520 --> 00:01:02,650
Next, we can generate the execution plan by running the TerraForm Plan Command.

13
00:01:03,680 --> 00:01:09,200
The very first line that is printed when we run this command shows that TerraForm tries to refresh the

14
00:01:09,200 --> 00:01:11,330
state in memory prior to the plan.

15
00:01:12,120 --> 00:01:16,920
Since it's the first time we are running the telephone Plant command, there will be no details related

16
00:01:16,920 --> 00:01:17,980
to state printed.

17
00:01:18,000 --> 00:01:21,960
Therefore implying that there is no state recorded at this moment in time.

18
00:01:22,750 --> 00:01:28,150
From this draft from also understands that currently there are no resources provisioned based on the

19
00:01:28,150 --> 00:01:32,770
configuration files and then creates an execution plan of create.

20
00:01:34,520 --> 00:01:35,210
Moving on.

21
00:01:35,210 --> 00:01:37,160
Let us now run TerraForm apply.

22
00:01:37,790 --> 00:01:43,760
This command also tries to refresh the in memory state, finds that there is no state recorded at the

23
00:01:43,760 --> 00:01:47,150
moment and then proceeds to create an execution plan.

24
00:01:47,600 --> 00:01:50,660
Once confirmed, TerraForm creates the local file resource.

25
00:01:50,660 --> 00:01:56,450
As expected, TerraForm creates a unique ID for the resource as seen in the command output.

26
00:01:57,780 --> 00:02:02,940
And as expected, we can see that the file has been created with the content that we provided.

27
00:02:03,600 --> 00:02:06,570
Now, what will happen if you run the form?

28
00:02:06,570 --> 00:02:07,890
Apply command again?

29
00:02:08,880 --> 00:02:15,330
Therefore knows that a local file resource by the name of PET and the same ID that we just saw already

30
00:02:15,330 --> 00:02:17,970
exists and it takes no further action.

31
00:02:18,880 --> 00:02:21,340
So how does TerraForm know that?

32
00:02:21,760 --> 00:02:25,000
How does it know that the local fire resource already exist?

33
00:02:26,070 --> 00:02:27,350
To understand that.

34
00:02:27,360 --> 00:02:30,780
Let us check the contents of the configuration directory again.

35
00:02:31,770 --> 00:02:38,010
We can now see that there is an additional file called TerraForm State created in this directory.

36
00:02:38,780 --> 00:02:44,840
This file is called ITR Form State file, which was created as a consequence of data from apply command

37
00:02:44,840 --> 00:02:47,330
that created the resource in the first place.

38
00:02:48,240 --> 00:02:53,100
This file is not created until later from apply Command is run at least once.

39
00:02:54,260 --> 00:03:00,200
The state file is a JSON data structure that maps the real world infrastructure resources to the resource

40
00:03:00,200 --> 00:03:02,390
definition in the configuration files.

41
00:03:03,610 --> 00:03:09,400
If we inspect the contents of the state file, we can see that it has the complete record of the infrastructure

42
00:03:09,400 --> 00:03:10,690
created by TerraForm.

43
00:03:11,320 --> 00:03:17,680
In this case, we have a single resource of type local file and a logical name called Pet.

44
00:03:18,630 --> 00:03:24,960
The details, such as the resource ID provider information and all the resource attributes are stored

45
00:03:24,960 --> 00:03:25,950
within this file.

46
00:03:26,880 --> 00:03:32,430
It contains every little detail pertaining to the infrastructure that was created by the reform, and

47
00:03:32,430 --> 00:03:37,890
it uses it as a single source of truth when using commands such as TerraForm Plan and Apply.

48
00:03:39,310 --> 00:03:45,430
If you make a change to the configuration file now and rerun the TerraForm Plan or apply Command.

49
00:03:45,520 --> 00:03:50,980
TerraForm, by default, refreshes the state again and compares it against the configuration file.

50
00:03:51,860 --> 00:03:57,740
It now knows that the resource argument called content has a different value in the configuration file

51
00:03:57,740 --> 00:04:00,650
as compared to the TerraForm set and the real world.

52
00:04:01,850 --> 00:04:04,330
The configuration value uses the string.

53
00:04:04,340 --> 00:04:10,370
We love pets for the content argument, but the state file record shows that the actual content in this

54
00:04:10,370 --> 00:04:12,470
file is I love pets.

55
00:04:13,750 --> 00:04:17,380
And as a result, TerraForm knows that the resource must be recreated.

56
00:04:17,380 --> 00:04:24,230
And when we run TerraForm, Apply It updates the state file as well from the output of the apply command.

57
00:04:24,250 --> 00:04:30,280
We can see that the older local file resource with the older ID is deleted and replaced with a new resource

58
00:04:30,280 --> 00:04:33,670
with a completely different ID with the updated content.

59
00:04:35,030 --> 00:04:37,940
The theme can be seen in the TerraForm State file as well.

60
00:04:38,210 --> 00:04:44,270
It no longer has a reference for the older resource ID and now has the details recorded for the replaced

61
00:04:44,270 --> 00:04:45,230
file resource.

62
00:04:46,010 --> 00:04:52,100
At this point in time, the configuration file and the state file are in sync, and since they do not

63
00:04:52,100 --> 00:04:55,850
have any differences, there will be no changes to apply subsequently.

64
00:04:56,680 --> 00:05:02,530
The example we have used here contains only a single resource, and the same is reflected in the TerraForm

65
00:05:02,530 --> 00:05:03,340
State file.

66
00:05:03,880 --> 00:05:09,250
In a real world scenario, a TerraForm configuration may contain numerous resources belonging to several

67
00:05:09,250 --> 00:05:13,540
different providers, irrespective of the size of the infrastructure.

68
00:05:13,570 --> 00:05:19,180
TerraForm will always create a state file and use it to store information about the state of the infrastructure

69
00:05:19,180 --> 00:05:20,230
in the real world.

70
00:05:20,260 --> 00:05:21,970
It is not an optional.

71
00:05:22,710 --> 00:05:24,060
In the upcoming lectures.

72
00:05:24,060 --> 00:05:26,970
We'll see why State is so important in reform.

