1
00:00:00,690 --> 00:00:03,600
We will now look at modules in Ansible.

2
00:00:04,340 --> 00:00:09,190
Ansible modules are categorized into various groups based on their functionality.

3
00:00:09,200 --> 00:00:10,970
Some of them are listed here.

4
00:00:11,150 --> 00:00:17,060
System modules are actions to be performed at a system level, such as modifying the users and groups

5
00:00:17,060 --> 00:00:23,270
on the system, modifying IP tables, firewall configurations on the system, working with logical volume

6
00:00:23,270 --> 00:00:30,410
groups, mounting operations or working with services, for example, starting stopping or restarting

7
00:00:30,410 --> 00:00:36,890
services in a system, command modules are used to execute commands or scripts on a host.

8
00:00:36,890 --> 00:00:43,160
This could be simple commands using the command module or an interactive execution using the ECS module.

9
00:00:43,160 --> 00:00:45,050
By responding to prompts.

10
00:00:45,440 --> 00:00:52,820
You could also run a script on the host using the script module File modules help work with files.

11
00:00:52,820 --> 00:00:58,760
For example, use the ACL module to set and retrieve ACL information on files.

12
00:00:58,760 --> 00:01:07,100
Use the archive and archive modules to compress and unpack files, use find lining file and replace

13
00:01:07,100 --> 00:01:10,250
modules to modify the contents of an existing file.

14
00:01:10,670 --> 00:01:20,390
Database modules help in working with databases such as MongoDB, MySQL, MySQL or PostgreSQL to add

15
00:01:20,390 --> 00:01:23,930
or remove databases or modify database configurations.

16
00:01:24,230 --> 00:01:30,290
The cloud section has a vast collection of modules for various different cloud providers like Amazon,

17
00:01:30,290 --> 00:01:36,530
Azure, Docker, Google, OpenStack and VMware being just a few of them.

18
00:01:37,190 --> 00:01:42,410
There are a number of modules available for each of these that allow you to perform various tasks,

19
00:01:42,410 --> 00:01:48,230
such as creating and destroying instances, performing configuration, changes in networking and security,

20
00:01:48,230 --> 00:01:55,070
managing containers, data centers, clusters, virtual networking, Voisin and a lot more.

21
00:01:55,670 --> 00:02:00,410
And then there are Windows modules that help you use Ansible in a Windows environment.

22
00:02:00,440 --> 00:02:06,890
Some of these are when copy to copy files, when command to execute a command on a Windows machine.

23
00:02:07,010 --> 00:02:13,130
And there are a bunch of other modules available to work with files on Windows, create an IIS website,

24
00:02:13,130 --> 00:02:19,970
install a software using MSI installer, make changes to registry using REG, edit and manage services

25
00:02:19,970 --> 00:02:21,530
and users in Windows.

26
00:02:22,210 --> 00:02:25,420
These are just a few modules in few categories.

27
00:02:25,420 --> 00:02:31,750
There are a lot more and a comprehensive list can be found at docs dot, ansible dot com along with

28
00:02:31,750 --> 00:02:33,850
detailed instructions on each of them.

29
00:02:34,270 --> 00:02:39,640
Let's look at a few of these modules in detail to understand how you can use them and how to read the

30
00:02:39,640 --> 00:02:41,020
documentation page.

31
00:02:41,290 --> 00:02:43,510
We will start with the command module.

32
00:02:44,240 --> 00:02:48,320
The command module is used to execute a command on a remote node.

33
00:02:48,940 --> 00:02:54,250
The parameters of the command module as listed in the documentation page is shown here.

34
00:02:55,510 --> 00:02:59,110
Shown is a sample Ansible playbook using the command module.

35
00:02:59,170 --> 00:03:06,520
As you can see, to use the module, you simply create a key value pair of the module name and the parameter

36
00:03:06,520 --> 00:03:08,020
which is the command.

37
00:03:08,020 --> 00:03:09,370
And in this case.

38
00:03:10,420 --> 00:03:16,840
In this case, we are instructing Ansible to run the data command on the host, followed by executing

39
00:03:16,840 --> 00:03:22,120
the cat XY resolved or conf command to list the contents of the file.

40
00:03:22,990 --> 00:03:26,890
In case you needed to change directory before executing a command.

41
00:03:26,890 --> 00:03:34,990
For example, I will rewrite the second command in a different form now by removing SC from the CAT

42
00:03:34,990 --> 00:03:39,910
command and setting change directory parameter to slash ETSI.

43
00:03:40,570 --> 00:03:47,200
This will ensure that Ansible changes directory to slash ETSI before executing the command.

44
00:03:47,590 --> 00:03:52,540
This is how a parameter and value is passed to this command module.

45
00:03:52,810 --> 00:03:57,750
The creates parameter is used to perform a check before the command is run.

46
00:03:57,760 --> 00:04:04,660
For example, this command to create the folder will only run if the folder does not exist.

47
00:04:06,420 --> 00:04:10,470
The remaining parameters are self explanatory, so we will skip them.

48
00:04:10,470 --> 00:04:13,770
Except for this one right here called Free form.

49
00:04:14,040 --> 00:04:17,730
This is worth looking at as you may see it in different modules.

50
00:04:18,269 --> 00:04:23,580
Free form indicates that this module takes a free form command to run.

51
00:04:24,060 --> 00:04:25,440
So what does that mean?

52
00:04:25,920 --> 00:04:32,610
You will not be able to input a parameter with the name free form like how we just used change directory

53
00:04:32,610 --> 00:04:42,600
or create options or command input such as cat, etsi, resolved or conf or make directory slash folder

54
00:04:42,630 --> 00:04:44,820
is the free form input.

55
00:04:45,000 --> 00:04:47,660
Not all modules support input like this.

56
00:04:47,670 --> 00:04:54,420
For example, the copy module which is used to copy files from a source to a destination, only takes

57
00:04:54,420 --> 00:04:58,140
parameterized input and not free form input.

58
00:04:58,230 --> 00:05:06,600
So as you can see here, copy requires a source file as CRC parameter and destination as dest parameter.

59
00:05:06,720 --> 00:05:14,070
However, the previous command module did not really require you to specify key equals value format.

60
00:05:14,070 --> 00:05:15,600
For the command to run.

61
00:05:15,600 --> 00:05:20,070
The command in the command module is a free form parameter.

62
00:05:21,720 --> 00:05:24,780
Another module to look at is the script module.

63
00:05:25,530 --> 00:05:33,090
The script module executes a script which is located locally on the Ansible controller machine on one

64
00:05:33,090 --> 00:05:39,780
or more remote nodes after transferring it over to run a script on one or hundreds of servers.

65
00:05:39,810 --> 00:05:43,320
You really don't have to copy it over to all the servers.

66
00:05:43,320 --> 00:05:49,410
Ansible takes care of automatically copying the script to the remote node and then executing it on the

67
00:05:49,410 --> 00:05:50,430
remote systems.

68
00:05:51,370 --> 00:05:55,120
This is done through a very simple play that looks like this.

69
00:05:55,540 --> 00:06:02,380
Use the script module and specify the location of the script on the Ansible controller machine and the

70
00:06:02,380 --> 00:06:03,160
arguments.

71
00:06:03,880 --> 00:06:05,800
Let's look at the service module.

72
00:06:05,920 --> 00:06:13,540
The service module is used to maintain services on a system such as starting stopping or restarting

73
00:06:13,540 --> 00:06:14,260
a service.

74
00:06:14,560 --> 00:06:19,420
This Ansible playbook is used to start various services in a particular order.

75
00:06:19,450 --> 00:06:22,810
First, we start the database service using the service module.

76
00:06:23,020 --> 00:06:28,750
Then the service module, unlike the previous modules, do not have a free form input, which means

77
00:06:28,750 --> 00:06:32,350
you have to pass input in a key value pair format.

78
00:06:32,590 --> 00:06:37,390
We use the name parameter to specify the name of the service we wish to start.

79
00:06:37,390 --> 00:06:44,350
In this case, PostgreSQL and the state parameter indicates the operation we would like to perform in

80
00:06:44,350 --> 00:06:46,090
this case started.

81
00:06:46,240 --> 00:06:50,510
Now, if you're wondering why is it started instead of START?

82
00:06:50,530 --> 00:06:54,670
Well, hold on to your thoughts and we will come back to that in a bit.

83
00:06:55,090 --> 00:06:58,420
Now, there are two ways of writing this statement.

84
00:06:58,450 --> 00:07:05,920
You can either write it like this or write it in a dictionary or a map format like this.

85
00:07:06,340 --> 00:07:07,690
They're one and the same.

86
00:07:07,690 --> 00:07:14,200
Remember in YAML terms, name and state are properties of service.

87
00:07:15,000 --> 00:07:21,930
Let's add a few more tasks to start HTTP PD service followed by Engine X service like this.

88
00:07:23,070 --> 00:07:28,740
So back to our question on why the action is started and not start.

89
00:07:29,890 --> 00:07:38,260
If we were to instruct Ansible to start a service, we would say start the service Hpdi and not start

90
00:07:38,260 --> 00:07:40,540
TED the service http rd.

91
00:07:41,080 --> 00:07:42,850
So then why is it start?

92
00:07:42,850 --> 00:07:44,170
Ted and not start?

93
00:07:44,260 --> 00:07:48,320
We're not instructing Ansible to start the service.

94
00:07:48,340 --> 00:07:55,690
Instead, we are instructing Ansible to ensure that the service http rd is started.

95
00:07:56,020 --> 00:08:04,930
That essentially means if HTTP service is not already started started, if a HTTP service is already

96
00:08:04,930 --> 00:08:07,600
started, then don't do anything.

97
00:08:08,110 --> 00:08:10,510
This is called item potency.

98
00:08:11,050 --> 00:08:18,970
As per the Ansible documentation and operation is item potent if the result of performing at once is

99
00:08:18,970 --> 00:08:26,200
exactly the same as the result of performing it repeatedly without any intervening actions.

100
00:08:27,240 --> 00:08:35,520
Thus started, stopped and restarted actions instruct Ansible to ensure the service is in a particular

101
00:08:35,520 --> 00:08:36,150
state.

102
00:08:36,570 --> 00:08:42,900
Majority of the modules in Ansible are important and Ansible highly recommends this.

103
00:08:43,470 --> 00:08:50,610
The overall idea is that you should be able to run the same playbook again and Ansible should report

104
00:08:50,610 --> 00:08:53,310
that everything is in an expected state.

105
00:08:53,730 --> 00:08:59,310
If something is not, Ansible takes care of putting it to the expected state.

106
00:09:00,180 --> 00:09:08,280
The lime in file module is used to find a line in a file and replace it or add it if it doesn't already

107
00:09:08,280 --> 00:09:08,920
exist.

108
00:09:08,940 --> 00:09:16,530
For example, we are given a task to add a new DNS server into the ETSI resolve dot com file.

109
00:09:17,100 --> 00:09:24,960
This simple ansible playbook using the line in file task adds the new name server information into the

110
00:09:24,960 --> 00:09:27,120
ETSI resolve dot com file.

111
00:09:27,660 --> 00:09:31,470
Remember the line in file module is important.

112
00:09:32,320 --> 00:09:37,660
Let's compare this Ansible playbook with a simple script that tries to achieve the same results.

113
00:09:38,140 --> 00:09:45,550
If this script is run multiple times, it adds a new entry into the file each time, which is not desired.

114
00:09:45,790 --> 00:09:52,540
If you run the Ansible playbook multiple times, it will ensure there is only a single entry in the

115
00:09:52,540 --> 00:09:53,170
file.

116
00:09:53,680 --> 00:09:54,310
Neat.

117
00:09:55,090 --> 00:09:59,320
Well that's it for now on modules and Ansible.

118
00:09:59,500 --> 00:10:03,770
Head over to the coding exercises section and practice working with modules.

119
00:10:03,800 --> 00:10:05,800
I will see you in the next lecture.

