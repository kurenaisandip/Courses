1
00:00:05,070 --> 00:00:10,050
In this lecture, we will look at commands, arguments and entry points in Docker.

2
00:00:10,590 --> 00:00:12,880
Let's start with a simple scenario.

3
00:00:12,900 --> 00:00:16,590
Say you were to run a docker container from an Ubuntu image.

4
00:00:16,740 --> 00:00:23,640
When you run the Docker run Ubuntu command, it runs an instance of Ubuntu image and exits immediately.

5
00:00:23,850 --> 00:00:28,440
If you were to list the running containers, you wouldn't see the container running.

6
00:00:28,560 --> 00:00:34,170
If you list all containers, including those that are stopped, you will see that the new container

7
00:00:34,170 --> 00:00:36,870
you ran is in an excited state.

8
00:00:37,080 --> 00:00:38,610
Now why is that?

9
00:00:39,670 --> 00:00:44,710
Unlike virtual machines, containers are not meant to host an operating system.

10
00:00:44,740 --> 00:00:51,850
Containers are meant to run a specific task or process, such as to host an instance of a web server

11
00:00:51,850 --> 00:00:58,300
or application server or a database, or simply to carry out some kind of computation or analysis.

12
00:00:58,960 --> 00:01:02,410
Once the task is complete, the container exits.

13
00:01:02,560 --> 00:01:07,810
A container only leaves as long as the process inside it is alive.

14
00:01:08,320 --> 00:01:14,050
If the web service inside the container is stopped or crashes, the container exits.

15
00:01:14,050 --> 00:01:18,130
So who defines what process is run within the container?

16
00:01:18,160 --> 00:01:24,400
If you look at the Docker file for popular Docker images like Engine X, you will see an instruction

17
00:01:24,400 --> 00:01:30,640
called CMD, which stands for Command that defines the program that will be run within the container

18
00:01:30,640 --> 00:01:31,810
when it starts.

19
00:01:31,810 --> 00:01:39,700
For the engine X image, it is the engine X command for the MySQL image, it is the MySQL D command.

20
00:01:39,730 --> 00:01:46,180
What we tried to do earlier was to run a container with a plain Ubuntu operating system.

21
00:01:46,510 --> 00:01:49,420
Let us look at the docker file for this image.

22
00:01:49,840 --> 00:01:54,160
You will see that it uses bash as the default command.

23
00:01:54,550 --> 00:01:59,650
Now, bash is not really a process like a web server or database server.

24
00:01:59,860 --> 00:02:03,760
It is a shell that listens for inputs from a terminal.

25
00:02:03,790 --> 00:02:07,030
If it cannot find a terminal, it exits.

26
00:02:07,150 --> 00:02:14,050
When we ran the Ubuntu container earlier, Docker created a container from the Ubuntu image and launched

27
00:02:14,050 --> 00:02:15,460
the bash program.

28
00:02:15,610 --> 00:02:23,020
By default, Docker does not attach a terminal to a container when it is run, and so the bash program

29
00:02:23,020 --> 00:02:26,620
does not find the terminal and so it exits.

30
00:02:27,040 --> 00:02:33,760
Since the process that was started when the container was created finished, the container exits as

31
00:02:33,760 --> 00:02:34,420
well.

32
00:02:34,450 --> 00:02:39,100
So how do you specify a different command to start the container?

33
00:02:39,220 --> 00:02:46,330
One option is to append a command to the Docker run command, and that way it overrides the default

34
00:02:46,330 --> 00:02:48,730
command specified within the image.

35
00:02:48,820 --> 00:02:55,930
In this case I run the Docker run Ubuntu command with the sleep five command as the added option.

36
00:02:56,260 --> 00:02:59,230
This way when the container starts it runs.

37
00:02:59,230 --> 00:03:03,510
The sleep program, waits for 5 seconds and then exits.

38
00:03:03,520 --> 00:03:06,070
But how do you make that change permanent?

39
00:03:06,430 --> 00:03:10,870
Say you want the image to always run the sleep command when it starts.

40
00:03:11,020 --> 00:03:17,320
You would then create your own image from the base ubuntu image and specify a new command.

41
00:03:17,800 --> 00:03:24,400
There are different ways of specifying the command, either the command simply as is in a shell form

42
00:03:24,400 --> 00:03:27,340
or in a JSON array format like this.

43
00:03:27,610 --> 00:03:34,540
But remember when you specify in a JSON array format, the first element in the array should be the

44
00:03:34,540 --> 00:03:35,540
executable.

45
00:03:35,560 --> 00:03:43,000
In this case, the sleep program do not specify the command and parameters together like this.

46
00:03:43,180 --> 00:03:48,070
The command and its parameters should be separate elements in the list.

47
00:03:48,310 --> 00:03:55,540
So I now build my new image using the Docker, build command and name it as Ubuntu Sleeper.

48
00:03:55,780 --> 00:04:01,810
I could now simply run the Docker Ubuntu Sleeper command and get the same results.

49
00:04:02,110 --> 00:04:06,130
It always sleeps for 5 seconds and exits.

50
00:04:06,370 --> 00:04:10,270
But what if I wish to change the number of seconds it sleeps?

51
00:04:10,300 --> 00:04:15,380
Currently it is hardcoded to 5 seconds as we learned before.

52
00:04:15,400 --> 00:04:20,779
One option is to run the Docker run command with the new command appended to it.

53
00:04:20,800 --> 00:04:22,930
In this case sleep ten.

54
00:04:22,930 --> 00:04:29,150
And so the command that will be run at startup will be sleep ten, but it doesn't look very good.

55
00:04:29,170 --> 00:04:35,410
The name of the image Ubuntu Sleeper in itself implies that the container will sleep, so we shouldn't

56
00:04:35,410 --> 00:04:37,990
have to specify the sleep command again.

57
00:04:38,020 --> 00:04:41,080
Instead, we would like it to be something like this.

58
00:04:41,230 --> 00:04:44,260
Docker run Ubuntu sleeper ten.

59
00:04:45,060 --> 00:04:47,580
We only want to pass in the number of seconds.

60
00:04:47,580 --> 00:04:52,440
The container should sleep and the sleep command should be invoked automatically.

61
00:04:52,710 --> 00:04:56,430
And that is where the entry point instruction comes into play.

62
00:04:57,180 --> 00:05:03,390
The entry point instruction is like the command instruction, as you can specify the program that will

63
00:05:03,390 --> 00:05:05,640
be run when the container starts.

64
00:05:05,880 --> 00:05:12,750
And whatever you specify on the command line in this case, ten will get appended to the entry point.

65
00:05:12,930 --> 00:05:17,940
So the command that will be run when the container starts is sleep ten.

66
00:05:18,330 --> 00:05:20,820
So that's the difference between the two.

67
00:05:21,060 --> 00:05:28,260
In case of the CMD instruction, the command line parameters passed will get replaced entirely, whereas

68
00:05:28,260 --> 00:05:33,150
in case of entry point, the command line parameters will get appended.

69
00:05:33,330 --> 00:05:39,870
Now, in the second case, what if I run the Ubuntu Sleeper image command without appending the number

70
00:05:39,870 --> 00:05:40,890
of seconds?

71
00:05:41,190 --> 00:05:49,170
Then the command at startup will be just sleep and you get the error that the operand is missing.

72
00:05:49,260 --> 00:05:56,400
So how do you configure a default value for the command if one was not specified in the command line?

73
00:05:56,580 --> 00:06:01,500
That's where you would use both entry point as well as the command instruction.

74
00:06:01,800 --> 00:06:07,230
In this case, the command instruction will be appended to the entry point instruction.

75
00:06:07,350 --> 00:06:10,530
So at startup, the command would be sleep five.

76
00:06:10,560 --> 00:06:16,680
If you didn't specify any parameters in the command line, if you did, then that will override the

77
00:06:16,680 --> 00:06:18,040
command instruction.

78
00:06:18,060 --> 00:06:24,270
And remember, for this to happen, you should always specify the entry point and command instructions

79
00:06:24,270 --> 00:06:25,980
in a JSON format.

80
00:06:26,850 --> 00:06:34,860
Finally, what if you really, really want to modify the entry point during runtime, say, from sleep

81
00:06:34,860 --> 00:06:37,650
to an imaginary sleep 2.0 command?

82
00:06:38,040 --> 00:06:44,970
Well, in that case, you can override it by using the entry point option in the Docker run command.

83
00:06:45,180 --> 00:06:50,790
The final command at startup will then be sleep 2.0 ten.

84
00:06:51,470 --> 00:06:55,880
Well, that's it for this lecture, and I will see you in the next.

