1
00:00:05,460 --> 00:00:07,380
Hello and welcome to this lecture.

2
00:00:08,050 --> 00:00:13,630
Before we head into setting up a Kubernetes cluster, it is important to understand some of the basic

3
00:00:13,630 --> 00:00:14,600
concepts.

4
00:00:14,620 --> 00:00:20,560
This is to make sense of the terms that we will come across while setting up a Kubernetes cluster.

5
00:00:21,070 --> 00:00:22,900
Let us start with nodes.

6
00:00:22,960 --> 00:00:28,330
A node is a machine, physical or virtual, on which Kubernetes is installed.

7
00:00:28,660 --> 00:00:34,300
A node is a worker machine, and that is where containers will be launched by Kubernetes.

8
00:00:34,990 --> 00:00:41,500
It was also known as Minions in the past, so you might hear these terms used interchangeably.

9
00:00:42,190 --> 00:00:45,940
But what if the node on which your application is running fails?

10
00:00:46,270 --> 00:00:49,180
Well, obviously our application goes down.

11
00:00:49,480 --> 00:00:52,360
So you need to have more than one nodes.

12
00:00:53,970 --> 00:00:57,240
A cluster is a set of nodes grouped together.

13
00:00:57,890 --> 00:00:58,400
This way.

14
00:00:58,400 --> 00:01:04,040
Even if one node fails, you have your application still accessible from the other nodes.

15
00:01:04,660 --> 00:01:08,890
Moreover, having multiple nodes helps in sharing load as well.

16
00:01:10,680 --> 00:01:12,120
Now we have a cluster.

17
00:01:12,120 --> 00:01:15,180
But who is responsible for managing the cluster?

18
00:01:15,330 --> 00:01:19,050
Where is the information about the members of the cluster stored?

19
00:01:19,290 --> 00:01:21,190
How are the nodes monitored?

20
00:01:21,210 --> 00:01:27,090
When a node fails, how do you move the workload of the failed node to another worker node?

21
00:01:27,570 --> 00:01:29,640
That's where the master comes in.

22
00:01:30,090 --> 00:01:36,750
The master is another node with Kubernetes installed in it and is configured as a master.

23
00:01:37,170 --> 00:01:43,380
The master watches over the nodes in the cluster and is responsible for the actual orchestration of

24
00:01:43,380 --> 00:01:45,750
containers on the worker nodes.

25
00:01:47,640 --> 00:01:54,210
When you install Kubernetes on a system, you're actually installing the following components an API

26
00:01:54,210 --> 00:02:01,920
server and CD service, a cube that service a container, runtime controllers and schedulers.

27
00:02:02,750 --> 00:02:06,530
The API server acts as the front end for Kubernetes.

28
00:02:06,920 --> 00:02:13,670
The users management devices, command line interfaces all talk to the API server to interact with the

29
00:02:13,670 --> 00:02:15,050
Kubernetes cluster.

30
00:02:15,760 --> 00:02:18,340
Next is the Etsy Keystore.

31
00:02:18,550 --> 00:02:26,080
Etsy ID is a distributed reliable key value store used by Kubernetes to store all data used to manage

32
00:02:26,080 --> 00:02:26,980
the cluster.

33
00:02:27,100 --> 00:02:33,970
Think of it this way When you have multiple nodes and multiple masters in your cluster, Etsy D stores,

34
00:02:33,970 --> 00:02:38,650
all that information on all the nodes in the cluster in a distributed manner.

35
00:02:39,130 --> 00:02:45,670
Etsy is responsible for implementing locks within the cluster to ensure that there are no conflicts

36
00:02:45,670 --> 00:02:47,020
between the masters.

37
00:02:48,030 --> 00:02:54,000
The scheduler is responsible for distributing work or containers across multiple nodes.

38
00:02:54,030 --> 00:02:58,350
It looks for newly created containers and assigns them to nodes.

39
00:02:59,120 --> 00:03:02,250
The controllers are the brain behind orchestration.

40
00:03:02,270 --> 00:03:08,330
They are responsible for noticing and responding when nodes, containers or endpoints goes down.

41
00:03:08,660 --> 00:03:13,490
The controllers make decisions to bring up new containers in such cases.

42
00:03:14,240 --> 00:03:19,490
The container runtime is the underlying software that is used to run containers.

43
00:03:19,520 --> 00:03:24,560
In our case, it happens to be Docker, but there are other options as well.

44
00:03:24,710 --> 00:03:30,050
And finally, Cube LED is the agent that runs on each node in the cluster.

45
00:03:30,440 --> 00:03:36,740
The agent is responsible for making sure that the containers are running on the nodes as expected.

46
00:03:39,020 --> 00:03:46,790
So far we saw two types of servers master and worker and a set of components that make up Kubernetes.

47
00:03:47,470 --> 00:03:51,890
But how are these components distributed across different types of servers?

48
00:03:51,910 --> 00:03:58,750
In other words, how does one server become a master and the other the slave, The worker node or minion,

49
00:03:58,750 --> 00:04:04,420
as it is also known, is where the containers are hosted, for example, Docker containers.

50
00:04:04,420 --> 00:04:10,570
And to run Docker containers on a system, we need container runtime installed and that's where the

51
00:04:10,570 --> 00:04:12,130
container runtime falls.

52
00:04:12,130 --> 00:04:14,560
In this case it happens to be Docker.

53
00:04:14,920 --> 00:04:16,990
This doesn't have to be Docker.

54
00:04:17,019 --> 00:04:23,830
There are other container runtime alternatives available such as Rocket or cryo, but throughout this

55
00:04:23,830 --> 00:04:28,390
course we are going to use Docker as our container runtime engine.

56
00:04:29,110 --> 00:04:34,240
The master server has the Cube API server and that is what makes it a master.

57
00:04:34,270 --> 00:04:40,930
Similarly, the worker nodes have the cube let agent that is responsible for interacting with the master

58
00:04:40,930 --> 00:04:46,750
to provide health information of the worker node and carry out actions requested by the master on the

59
00:04:46,750 --> 00:04:47,710
worker nodes.

60
00:04:48,400 --> 00:04:52,630
All the information gathered are stored in a key value store on the Master.

61
00:04:52,780 --> 00:04:58,060
The key value store is based on the popular ID framework, as we just discussed.

62
00:04:58,800 --> 00:05:02,760
The Master also has the control manager and the scheduler.

63
00:05:02,940 --> 00:05:06,360
There are other components as well, but we will stop there for now.

64
00:05:06,390 --> 00:05:12,640
The reason we went through this is to understand what components constitute the master and worker nodes.

65
00:05:12,660 --> 00:05:18,990
This will help us install and configure the right components on different systems when we set up our

66
00:05:18,990 --> 00:05:20,070
infrastructure.

67
00:05:21,530 --> 00:05:27,230
And finally, we also need to learn a little bit about one of the command line utilities known as the

68
00:05:27,230 --> 00:05:33,110
Cube Command Line Tool or Cube CTL or Cube Control, as it is also called.

69
00:05:33,380 --> 00:05:40,460
The Cube Control tool is used to deploy and manage applications on a Kubernetes cluster to get cluster

70
00:05:40,460 --> 00:05:46,040
information, to get the status of other nodes in the cluster and to manage many other things.

71
00:05:46,800 --> 00:05:51,570
The Cube CTL run command is used to deploy an application on the cluster.

72
00:05:52,200 --> 00:05:59,310
The Cube Cluster Info command is used to view information about the cluster and the cube CTL get nodes.

73
00:05:59,310 --> 00:06:02,790
Command is used to list all the nodes part of the cluster.

74
00:06:03,150 --> 00:06:08,180
That's all we need to know for now, and we will keep learning more commands throughout this course.

75
00:06:08,190 --> 00:06:13,480
We will explore more commands with Cube CTL when we learn the associated concepts.

76
00:06:13,500 --> 00:06:20,160
For now, just remember to run cluster info and get nodes commands and that will help us get through

77
00:06:20,160 --> 00:06:21,390
the first few labs.

78
00:06:21,750 --> 00:06:23,220
That's it for this lecture.

79
00:06:23,220 --> 00:06:25,080
I will see you in the next lecture.

