1
00:00:05,040 --> 00:00:10,590
We're going to start by looking at a high level overview on why you need Docker and what it can do for

2
00:00:10,590 --> 00:00:11,040
you.

3
00:00:11,130 --> 00:00:16,320
Let me start by sharing how I got introduced to Docker and one of my previous projects.

4
00:00:16,320 --> 00:00:22,470
I had this requirement to set up an end to end application stack, including various different technologies

5
00:00:22,470 --> 00:00:29,730
like a web server using Node.js and a database such as MongoDB and a messaging system like Redis and

6
00:00:29,730 --> 00:00:31,620
an orchestration tool like Ansible.

7
00:00:31,800 --> 00:00:37,110
We had a lot of issues developing this application stack with all these different components.

8
00:00:37,350 --> 00:00:43,590
First of all, their compatibility with the underlying OSS was an issue we had to ensure that all these

9
00:00:43,590 --> 00:00:48,420
different services were compatible with the version of OS we were planning to use.

10
00:00:48,540 --> 00:00:54,180
There have been times when certain version of these services were not compatible with the OS and we've

11
00:00:54,180 --> 00:00:59,460
had to go back and look at different OS that was compatible with all of these different services.

12
00:00:59,880 --> 00:01:05,820
Secondly, we had to check the compatibility between the services and the libraries and dependencies

13
00:01:05,820 --> 00:01:06,810
on the OS.

14
00:01:07,110 --> 00:01:13,380
We've had issues where one service requires one version of a dependent library, whereas another service

15
00:01:13,380 --> 00:01:15,060
requires another version.

16
00:01:15,480 --> 00:01:18,640
The architecture of our application changed over time.

17
00:01:18,660 --> 00:01:25,080
We've had to upgrade to newer versions of these components or change the database, etc. And every time

18
00:01:25,080 --> 00:01:31,020
something changed, we had to go through the same process of checking compatibility between these various

19
00:01:31,020 --> 00:01:34,200
components and the underlying infrastructure.

20
00:01:34,620 --> 00:01:40,290
This compatibility matrix issue is usually referred to as the matrix from hell.

21
00:01:40,740 --> 00:01:48,010
Next, every time we had a new developer on board, we found it really difficult to set up a new environment.

22
00:01:48,030 --> 00:01:53,820
The new developers had to follow a large set of instructions and run hundreds of commands to finally

23
00:01:53,820 --> 00:01:55,080
set up their environments.

24
00:01:55,110 --> 00:02:00,090
We had to make sure they were using the right operating system, the right versions of each of these

25
00:02:00,090 --> 00:02:04,680
components, and each developer had to set all that up by himself each time.

26
00:02:05,340 --> 00:02:09,210
We also had different development test and production environments.

27
00:02:09,750 --> 00:02:15,150
One developer may be comfortable using one OS and the others may be comfortable using another one.

28
00:02:15,150 --> 00:02:21,150
And so we couldn't guarantee that the application that we were building would run the same way in different

29
00:02:21,150 --> 00:02:21,990
environments.

30
00:02:22,140 --> 00:02:29,580
And so all of this made our life in developing, building and shipping the application really difficult.

31
00:02:29,970 --> 00:02:35,040
So I needed something that could help us with the compatibility issue and something that will allow

32
00:02:35,040 --> 00:02:41,640
us to modify or change these components without affecting the other components and even modify the underlying

33
00:02:41,640 --> 00:02:43,590
operating systems as required.

34
00:02:44,040 --> 00:02:46,440
And that search landed me on Docker.

35
00:02:46,740 --> 00:02:54,360
With Docker, I was able to run each component in a separate container with its own dependencies and

36
00:02:54,360 --> 00:03:01,110
its own libraries, all on the same VM and the OS, but within separate environments or containers.

37
00:03:01,650 --> 00:03:07,560
We just had to build the Docker configuration once and all our developers could now get started with

38
00:03:07,560 --> 00:03:12,810
a simple Docker run command irrespective of what the underlying operating system they run.

39
00:03:12,840 --> 00:03:17,370
All they needed to do was to make sure they had Docker installed on their systems.

40
00:03:17,490 --> 00:03:19,230
So what are containers?

41
00:03:19,260 --> 00:03:25,680
Containers are completely isolated environments, as in they can have their own processes or services,

42
00:03:25,680 --> 00:03:31,440
their own network interfaces, their own mounts, just like virtual machines, except they all share

43
00:03:31,440 --> 00:03:33,060
the same OS kernel.

44
00:03:33,240 --> 00:03:35,250
We will look at what that means in a bit.

45
00:03:35,250 --> 00:03:39,240
But it's also important to note that containers are not new with Docker.

46
00:03:39,270 --> 00:03:45,060
Containers have existed for about ten years now and some of the different types of containers are lxi,

47
00:03:45,060 --> 00:03:47,160
lxi, lxi, hdfs, etc..

48
00:03:47,370 --> 00:03:50,010
Docker utilizes lcs sea containers.

49
00:03:50,010 --> 00:03:55,140
Setting up these container environments is hard as they are very low level, and that is where Docker

50
00:03:55,140 --> 00:04:01,620
offers a high level tool with several powerful functionalities, making it really easy for end users

51
00:04:01,620 --> 00:04:04,660
like us to understand how Docker works.

52
00:04:04,680 --> 00:04:08,640
Let us revisit some basic concepts of operating systems first.

53
00:04:08,850 --> 00:04:15,450
If you look at operating systems like Ubuntu, Fedora, CC or Santos, they all consist of two things

54
00:04:15,450 --> 00:04:18,420
and OS kernel and a set of software.

55
00:04:18,779 --> 00:04:24,570
The OS kernel is responsible for interacting with the underlying hardware, while the OS kernel remains

56
00:04:24,570 --> 00:04:25,950
the same, which is Linux.

57
00:04:25,950 --> 00:04:30,720
In this case, it's the software above it that makes these operating systems different.

58
00:04:30,840 --> 00:04:36,900
This software may consist of a different user interface drivers, compilers, file managers, developer

59
00:04:36,900 --> 00:04:44,310
tools, etc. So you have a common Linux kernel shared across all OSes and some custom software that

60
00:04:44,310 --> 00:04:46,830
differentiate operating systems from each other.

61
00:04:47,480 --> 00:04:51,580
We said earlier that Docker containers share the underlying kernel.

62
00:04:51,590 --> 00:04:53,450
So what does that actually mean?

63
00:04:53,600 --> 00:04:54,680
Sharing the kernel?

64
00:04:54,980 --> 00:04:59,270
Let's say we have a system with an Ubuntu OS with docker installed on it.

65
00:04:59,540 --> 00:05:06,500
Docker can run any flavor of OS on top of it as long as they are all based on the same kernel in this

66
00:05:06,500 --> 00:05:07,700
case Linux.

67
00:05:07,940 --> 00:05:14,360
If the underlying OS is ubuntu, docker can run a container based on another distribution like debian,

68
00:05:14,360 --> 00:05:16,670
fedora, souce or CentOS.

69
00:05:17,150 --> 00:05:23,030
Each docker container only has the additional software that we just talked about in the previous slide

70
00:05:23,030 --> 00:05:25,700
that makes these operating systems different.

71
00:05:25,700 --> 00:05:31,910
And Docker utilizes the underlying kernel of the Docker host, which works with all OSes above.

72
00:05:32,270 --> 00:05:39,560
So what is an OS that do not share the same kernel as this windows and so you won't be able to run a

73
00:05:39,560 --> 00:05:43,270
Windows based container on a docker host with Linux on it.

74
00:05:43,280 --> 00:05:47,120
For that you will require Docker on a Windows server.

75
00:05:47,660 --> 00:05:53,710
Now it is when I say this that most of my students go, Hey, hold on there, that's not true.

76
00:05:53,720 --> 00:05:58,910
And they install Docker on Windows Run a container based on Linux and go see it's possible.

77
00:05:59,770 --> 00:06:06,310
Well, when you install Docker on Windows and run a Linux container on Windows, you're not really running

78
00:06:06,310 --> 00:06:07,920
a Linux container on Windows.

79
00:06:07,930 --> 00:06:12,950
Windows runs a Linux container on a Linux virtual machine under the hood.

80
00:06:12,970 --> 00:06:17,480
So it's really Linux container on Linux, virtual machine on Windows.

81
00:06:17,500 --> 00:06:23,650
We discuss more about this on the Docker on Windows or Mac later during this course.

82
00:06:24,540 --> 00:06:30,960
Now, you might ask, isn't that a disadvantage then, not being able to run another kernel on the OS?

83
00:06:31,200 --> 00:06:36,900
The answer is no, because unlike hypervisors, Docker is not meant to virtualize and run different

84
00:06:36,900 --> 00:06:39,690
operating systems and kernels on the same hardware.

85
00:06:39,810 --> 00:06:46,740
The main purpose of Docker is to package and containerized applications and to ship them and to run

86
00:06:46,740 --> 00:06:50,100
them anywhere any time as many times as you want.

87
00:06:50,900 --> 00:06:56,480
So that brings us to the differences between virtual machines and containers, something that we tend

88
00:06:56,480 --> 00:06:59,360
to do, especially those from a virtualization background.

89
00:06:59,840 --> 00:07:05,690
As you can see on the right, in case of Docker, we have the underlying hardware infrastructure and

90
00:07:05,690 --> 00:07:09,050
then the OS and then Docker installed on the OS.

91
00:07:09,080 --> 00:07:13,970
Docker then manages the containers that run with libraries and dependencies alone.

92
00:07:14,300 --> 00:07:15,680
In case of virtual machines.

93
00:07:15,680 --> 00:07:21,720
We have the hypervisor like ESX on the hardware and then the virtual machines on them.

94
00:07:21,740 --> 00:07:27,740
As you can see, each virtual machine has its own OS inside it and then the dependencies and then the

95
00:07:27,740 --> 00:07:28,640
application.

96
00:07:29,090 --> 00:07:34,670
The overhead costs, higher utilization of underlying resources as there are multiple virtual operating

97
00:07:34,670 --> 00:07:36,440
systems and kernels running.

98
00:07:36,950 --> 00:07:43,790
The virtual machines also consume higher disk space as each VM is heavy and is usually in gigabytes

99
00:07:43,790 --> 00:07:48,800
in size, whereas Docker containers are lightweight and are usually in megabytes in size.

100
00:07:49,040 --> 00:07:54,590
This allows Docker containers to boot up faster, usually in a matter of seconds, whereas VMs, as

101
00:07:54,590 --> 00:07:59,870
we know, takes minutes to boot up as it needs to boot up the entire operating system.

102
00:08:00,380 --> 00:08:06,260
It is also important to note that Docker has less isolation as more resources are shared between the

103
00:08:06,260 --> 00:08:07,920
containers like the kernel.

104
00:08:07,940 --> 00:08:11,450
Whereas VMs have complete isolation from each other.

105
00:08:11,630 --> 00:08:17,360
Since VMs don't rely on the underlying OS or kernel, you can run different types of applications built

106
00:08:17,360 --> 00:08:22,370
on different OSes, such as Linux based or Windows based apps on the same hypervisor.

107
00:08:22,910 --> 00:08:25,370
So those are some differences between the two.

108
00:08:25,940 --> 00:08:30,680
Now, having said that, it's not an either container or virtual machine situation.

109
00:08:31,380 --> 00:08:33,630
It's containers and virtual machines.

110
00:08:33,840 --> 00:08:38,520
Now, when you have large environments with thousands of application containers running on thousands

111
00:08:38,520 --> 00:08:44,159
of Docker hosts, you will often see containers provisioned on virtual Docker hosts.

112
00:08:44,310 --> 00:08:48,210
That way, we can utilise the advantages of both technologies.

113
00:08:48,210 --> 00:08:53,820
We can use the benefits of virtualization to easily provision or decommission Docker host servers as

114
00:08:53,820 --> 00:08:54,520
required.

115
00:08:54,540 --> 00:09:00,000
At the same time, make use of the benefits of Docker to easily provisioned applications and quickly

116
00:09:00,000 --> 00:09:01,740
scale them as required.

117
00:09:02,100 --> 00:09:09,120
But remember that in this case we will not be provisioning that many virtual machines as we used to

118
00:09:09,120 --> 00:09:14,550
before, because earlier we provisioned a virtual machine for each application.

119
00:09:14,580 --> 00:09:19,830
Now you might provision a virtual machine for hundreds or thousands of containers.

120
00:09:20,100 --> 00:09:21,300
So how is it done?

121
00:09:21,330 --> 00:09:28,140
There are lots of containerized versions of applications readily available as of today, so most organisations

122
00:09:28,140 --> 00:09:34,590
have their products containerized and available in a public Docker repository called Docker Hub or Docker

123
00:09:34,590 --> 00:09:35,160
Store.

124
00:09:35,640 --> 00:09:41,700
For example, you can find images of most common operating systems, databases and other services and

125
00:09:41,700 --> 00:09:42,330
tools.

126
00:09:42,480 --> 00:09:48,720
Once you identify the images you need and you install Docker on your host, bringing up an application

127
00:09:48,720 --> 00:09:53,330
is as easy as running a Docker run command with the name of the image.

128
00:09:53,340 --> 00:09:58,890
In this case, running a Docker run Ansible command will run an instance of Ansible on the Docker host.

129
00:09:58,920 --> 00:10:04,680
Similarly, run an instance of MongoDB, Redis and Node.js using the Docker run command.

130
00:10:05,070 --> 00:10:11,100
If you need to run multiple instances of the web service, simply add as many instances as you need

131
00:10:11,100 --> 00:10:14,130
and configure a load balancer of some kind in the front.

132
00:10:15,000 --> 00:10:20,700
In case one of the instances were to fail, simply destroy that instance and launch a new one.

133
00:10:21,730 --> 00:10:27,340
There are other solutions available for handling such cases that we will look at later during this course.

134
00:10:27,640 --> 00:10:30,580
And for now, don't focus too much on the commands.

135
00:10:30,670 --> 00:10:32,410
We will get to that in a bit.

136
00:10:33,660 --> 00:10:36,680
We've been talking about images and containers.

137
00:10:36,690 --> 00:10:38,820
Let's understand the difference between the two.

138
00:10:39,630 --> 00:10:44,760
An image is a package or a template, just like a VMM template that you might have worked with in the

139
00:10:44,760 --> 00:10:46,080
virtualization world.

140
00:10:46,140 --> 00:10:49,020
It is used to create one or more containers.

141
00:10:49,530 --> 00:10:55,590
Containers are running instances of images that are isolated and have their own environments and set

142
00:10:55,590 --> 00:10:56,640
of processes.

143
00:10:57,270 --> 00:11:02,670
As we have seen before, a lot of products have been tokenized already in case you cannot find what

144
00:11:02,670 --> 00:11:03,550
you're looking for.

145
00:11:03,570 --> 00:11:09,240
You could create your own image and push it to Docker Hub Repository, making it available for public.

146
00:11:09,910 --> 00:11:16,720
So if you look at it, traditionally developers developed applications, then they hand it over to ops

147
00:11:16,720 --> 00:11:19,810
team to deploy and manage it in production environments.

148
00:11:20,290 --> 00:11:25,900
They do that by providing a set of instructions, such as information about how the host must be set

149
00:11:25,900 --> 00:11:30,790
up, what prerequisites are to be installed on the host, and how the dependencies are to be configured,

150
00:11:30,790 --> 00:11:31,480
etc..

151
00:11:32,190 --> 00:11:37,500
Since the ops team did not really develop the application on their own, they struggle with setting

152
00:11:37,500 --> 00:11:41,310
it up when they hit an issue, they work with the developers to resolve it.

153
00:11:41,990 --> 00:11:49,850
With Docker, the developers and operations teams work hand in hand to transform the guide into a Docker

154
00:11:49,850 --> 00:11:51,860
file with both of their requirements.

155
00:11:52,010 --> 00:11:56,270
This Docker file is then used to create an image for their applications.

156
00:11:56,510 --> 00:12:02,960
This image can now run on any host with Docker installed on it and is guaranteed to run the same way

157
00:12:02,960 --> 00:12:03,850
everywhere.

158
00:12:03,860 --> 00:12:07,910
So the ops team can now simply use the image to deploy the application.

159
00:12:07,910 --> 00:12:14,330
Since the image was already working when the developer built it and operations have not modified it.

160
00:12:14,360 --> 00:12:21,170
It continues to work the same way when deployed in production, and that's one example of how a tool

161
00:12:21,170 --> 00:12:24,350
like Docker contributes to the DevOps culture.

162
00:12:24,800 --> 00:12:26,180
Well, that's it for now.

163
00:12:26,180 --> 00:12:30,170
And in the upcoming lecture we will look at how to get started with Docker.

