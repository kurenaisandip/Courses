1
00:00:04,610 --> 00:00:06,570
Hello and welcome to this lecture.

2
00:00:06,590 --> 00:00:10,370
In this lecture we take a look at what YAML files are.

3
00:00:11,000 --> 00:00:14,000
All ansible playbooks are written in yaml.

4
00:00:14,030 --> 00:00:19,760
If you are familiar with yaml already, feel free to skip this section and head over to the next section.

5
00:00:19,850 --> 00:00:22,220
If you have not worked with YAML in the past.

6
00:00:22,220 --> 00:00:28,400
I would highly recommend going through this because the rest of the course depends entirely on yaml.

7
00:00:29,180 --> 00:00:35,570
Ansible playbooks are text files or configuration files rather that are written in a particular format

8
00:00:35,570 --> 00:00:36,890
called YAML.

9
00:00:37,130 --> 00:00:43,460
If you have worked with other data structure formats like XML or JSON, you should be able to easily

10
00:00:43,460 --> 00:00:44,270
pick it up.

11
00:00:44,480 --> 00:00:49,220
Don't worry, if you haven't worked on any of these, you should still be able to easily pick it up

12
00:00:49,220 --> 00:00:52,730
going through the coding exercises that accompany this course.

13
00:00:54,870 --> 00:00:59,850
A YAML file is used to represent data, in this case configuration data.

14
00:01:00,000 --> 00:01:05,150
Here is a quick comparison of a sample data in three different formats.

15
00:01:05,160 --> 00:01:10,770
The one on the left is XML, where we display a list of servers and their information.

16
00:01:11,570 --> 00:01:18,860
The same data is represented in JSON format in the middle and finally in YAML format to the right.

17
00:01:19,250 --> 00:01:22,070
Take a minute to compare the three formats.

18
00:01:31,420 --> 00:01:33,970
Let's take a close look at YAML.

19
00:01:34,270 --> 00:01:41,290
If you take the data in its simplest form, such as key value pair, this is how you would define it

20
00:01:41,290 --> 00:01:42,310
in Yamal.

21
00:01:42,520 --> 00:01:45,660
Key and value separated by a colon.

22
00:01:45,670 --> 00:01:54,310
The keys are fruit, vegetable, liquid and meat and the values are apple, carrot, water and chicken.

23
00:01:55,710 --> 00:02:02,130
Remember, you must have a space followed by a colon differentiating the key and the value.

24
00:02:02,220 --> 00:02:05,490
Let's take a look at how an array is represented.

25
00:02:06,090 --> 00:02:09,330
We would like to list some fruits and vegetables.

26
00:02:09,360 --> 00:02:12,360
We would say fruits followed by a colon.

27
00:02:12,390 --> 00:02:16,560
On the next line, enter each item with a dash in the front.

28
00:02:16,680 --> 00:02:20,940
The dash indicates that it's an element of an array.

29
00:02:21,950 --> 00:02:23,450
How about a dictionary?

30
00:02:23,720 --> 00:02:28,520
A dictionary is a set of properties grouped together under an item.

31
00:02:28,550 --> 00:02:33,350
Here we try to represent nutrition information of two fruits.

32
00:02:33,590 --> 00:02:38,330
The calories, fat and carbs are different for each fruit.

33
00:02:38,600 --> 00:02:41,750
Notice the blank space before each item.

34
00:02:42,080 --> 00:02:49,100
You must have equal number of blank spaces before the properties of a single item, so they are all

35
00:02:49,100 --> 00:02:50,660
aligned together.

36
00:02:54,620 --> 00:02:57,830
Let's take a closer look at spaces in YAML.

37
00:02:57,860 --> 00:03:02,660
Here we have a dictionary representing the nutrition information of banana.

38
00:03:02,960 --> 00:03:07,220
The total amount of calories, fat and carbs are shown.

39
00:03:08,120 --> 00:03:15,410
Notice the number of spaces before each property that indicates these key value pairs fall within banana.

40
00:03:15,620 --> 00:03:19,970
But what if we had extra spaces for fat and carbs?

41
00:03:20,780 --> 00:03:28,190
Then they will fall under calories and thus become properties of calories, which doesn't make any sense.

42
00:03:28,490 --> 00:03:34,280
This will result in a syntax error, which will tell you that mapping values are not allowed here because

43
00:03:34,280 --> 00:03:38,390
calories already have a value set, which is 105.

44
00:03:38,540 --> 00:03:41,780
You can either set a direct value or a hash map.

45
00:03:41,780 --> 00:03:43,370
You cannot have both.

46
00:03:43,550 --> 00:03:50,840
So the number of spaces before each property is key in YAML, you must ensure they are in the right

47
00:03:50,840 --> 00:03:53,840
form to represent your data correctly.

48
00:03:57,410 --> 00:03:59,390
Let's take it to another level.

49
00:03:59,510 --> 00:04:03,570
You can have less containing dictionaries, containing less.

50
00:04:03,590 --> 00:04:09,860
In this case, I have a list of fruits, and the elements of the list are banana and grape.

51
00:04:09,860 --> 00:04:15,290
But each of these element are further dictionaries containing nutrition information.

52
00:04:18,810 --> 00:04:26,010
A lot of students new to Yamal have reached out to me asking when to use a dictionary or a list.

53
00:04:26,590 --> 00:04:29,500
So let me explain this a little bit better.

54
00:04:29,740 --> 00:04:37,330
First of all, it is important to understand that all of what we discussed so far, such as XML, JSON

55
00:04:37,330 --> 00:04:40,510
or YAML, are used to represent data.

56
00:04:40,600 --> 00:04:46,500
It could be data about an organization and all of its employees and their personal details.

57
00:04:46,510 --> 00:04:51,260
Or it could be data about a school and all of its students and their grades.

58
00:04:51,280 --> 00:04:58,730
Or it could be data about an automobile manufacturing company and all of its cars and its details.

59
00:04:58,750 --> 00:05:00,370
It could be anything.

60
00:05:00,790 --> 00:05:03,430
Let's take an example of a car.

61
00:05:03,850 --> 00:05:11,470
A car is a single object and it has properties such as color, model, transition and price.

62
00:05:11,830 --> 00:05:16,030
To store different information or properties of a single object.

63
00:05:16,060 --> 00:05:20,500
We use a dictionary in this simple dictionary.

64
00:05:20,500 --> 00:05:25,330
I have properties of the car defined in a key value format.

65
00:05:25,780 --> 00:05:28,300
This need not be as simple as this.

66
00:05:28,300 --> 00:05:34,870
For example, in case we need to split the model further into model name and make here.

67
00:05:34,900 --> 00:05:39,950
You could then represent this as a dictionary within another dictionary.

68
00:05:39,970 --> 00:05:48,820
In this case, the single value of model is now replaced by a small dictionary with two properties name

69
00:05:48,820 --> 00:05:49,780
and ear.

70
00:05:50,110 --> 00:05:54,250
So this is a dictionary within another dictionary.

71
00:05:59,720 --> 00:06:03,390
Let's say we would like to store the name of six cars.

72
00:06:03,410 --> 00:06:06,980
The names are formed by the color and the model of the car.

73
00:06:07,310 --> 00:06:14,960
To store this, we would use a list or an array as it is multiple items of the same type of object.

74
00:06:15,260 --> 00:06:21,380
Since we are only storing the names, we have a symbol list of strings.

75
00:06:26,230 --> 00:06:30,510
What if we would like to store all information about each car?

76
00:06:30,520 --> 00:06:36,490
Everything that we listed before, such as the color model, transition and price?

77
00:06:36,910 --> 00:06:45,730
We will then modify the array from a list of strings to a list of dictionaries, so we expand each item

78
00:06:45,730 --> 00:06:50,680
in the array and replace the name with the dictionary we built earlier.

79
00:06:51,250 --> 00:06:59,830
This way, we are able to represent all information about multiple cars in a single YAML file using

80
00:06:59,830 --> 00:07:01,900
a list of dictionaries.

81
00:07:08,700 --> 00:07:15,090
So that's the difference between dictionary list and list of dictionaries.

82
00:07:15,120 --> 00:07:20,310
I hope you understood the difference between the three and when to use each of these.

83
00:07:22,740 --> 00:07:27,210
Before we head over to exercises, let's take a look at some key nodes.

84
00:07:27,570 --> 00:07:32,810
Dictionary is an unordered collection, whereas lists are ordered collection.

85
00:07:32,820 --> 00:07:34,350
So what does that mean?

86
00:07:34,530 --> 00:07:39,210
The two dictionaries that you see here have the same properties for Banana.

87
00:07:39,360 --> 00:07:45,000
However, you can see that the order of properties fat and carbs do not match.

88
00:07:45,030 --> 00:07:48,450
And the first dictionary fat is defined before carbs.

89
00:07:48,450 --> 00:07:52,620
And in the second dictionary, carbs comes first, followed by fat.

90
00:07:52,710 --> 00:07:54,680
But that doesn't really matter.

91
00:07:54,690 --> 00:08:00,690
The properties can be defined in any order, but the two dictionaries will still be the same as long

92
00:08:00,690 --> 00:08:03,570
as the values of each property match.

93
00:08:04,080 --> 00:08:07,110
This is not the same for lists or arrays.

94
00:08:07,470 --> 00:08:11,730
Arrays are ordered collection, so the order of items matter.

95
00:08:11,850 --> 00:08:18,630
The two lists shown are not the same because apple and banana are at different positions.

96
00:08:18,840 --> 00:08:23,160
This is something to keep in mind while working with data structures.

97
00:08:24,360 --> 00:08:31,800
Also remember any line beginning with a hash is automatically ignored and considered as a comment.

98
00:08:36,289 --> 00:08:41,720
We are now ready to head over to the coding exercises and have fun playing with YAML files.

