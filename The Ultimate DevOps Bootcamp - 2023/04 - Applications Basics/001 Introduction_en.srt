1
00:00:00,690 --> 00:00:04,350
In this section, we will look into the basics of applications.

2
00:00:05,540 --> 00:00:12,110
As we have been discussing, DevOps engineer must be comfortable with operations as well as software

3
00:00:12,110 --> 00:00:13,580
development concepts.

4
00:00:13,610 --> 00:00:19,440
When I say development, I'm not referring to hard core coding skills or programming.

5
00:00:19,460 --> 00:00:26,780
Instead, I am referring to understanding the basics of application development in different types of

6
00:00:26,780 --> 00:00:27,590
languages.

7
00:00:27,590 --> 00:00:33,320
And if you were given an application to deploy, how do you deploy it?

8
00:00:33,650 --> 00:00:40,370
So this section is mainly for those who are from a non development background, and it will provide

9
00:00:40,370 --> 00:00:47,090
you with some basics of the different kinds of programming languages and how software is developed using

10
00:00:47,090 --> 00:00:50,510
those and how they are built and how they can be deployed.

11
00:00:51,250 --> 00:00:53,980
And how to perform some basic troubleshooting tasks.

12
00:00:53,980 --> 00:00:59,590
And of course, each of these lectures are followed by labs where you'll be given an application source

13
00:00:59,590 --> 00:01:02,800
code and you'll build and deploy the application.

14
00:01:03,250 --> 00:01:09,430
We will also talk a little bit about how an application is compiled and what a source code or machine

15
00:01:09,430 --> 00:01:10,150
code is.

16
00:01:10,540 --> 00:01:18,010
I promise without getting into too much detail, but I think it will help you relate the concepts later

17
00:01:18,010 --> 00:01:20,200
when you work on builds.

18
00:01:20,560 --> 00:01:26,710
So the goal of this section is not to discuss all of the programming languages and the hundreds of libraries

19
00:01:26,710 --> 00:01:28,290
and build tools they support.

20
00:01:28,300 --> 00:01:35,290
Instead, it is to simply get a high level overview of the various the most commonly used applications

21
00:01:35,290 --> 00:01:43,570
so that when you attend a DevOps or cloud course on, say, Docker and the instructor gives you an application

22
00:01:43,570 --> 00:01:49,660
to modernize and containerized, you know what they are talking about, you know, the different steps

23
00:01:49,660 --> 00:01:54,960
involved in that and you should be able to relate those with what you learn in this section.

24
00:01:54,970 --> 00:01:57,490
So keeping that in mind, let's proceed.

25
00:01:58,280 --> 00:02:04,400
There are so many different programming languages out there today, and we're going to pick a few of

26
00:02:04,400 --> 00:02:08,150
the most popular and commonly used languages for this.

27
00:02:08,150 --> 00:02:10,009
I checked Stack overflows.

28
00:02:10,160 --> 00:02:16,910
Insights from their 2019 survey and looked at the top programming, scripting or markup languages.

29
00:02:16,940 --> 00:02:25,250
From this, we filter out the databases, scripting and markup languages, so we are left with this.

30
00:02:25,610 --> 00:02:30,410
JavaScript, Python, Java seem to be the top three.

31
00:02:30,680 --> 00:02:33,120
So we're going to go ahead with that.

32
00:02:33,140 --> 00:02:37,580
For JavaScript, we will use the Node.js framework for server side.

33
00:02:39,820 --> 00:02:46,300
The different programming languages can be broadly classified into compiled or interpreted.

34
00:02:46,590 --> 00:02:51,910
Now, I'm not going to get into describing each of these in detail or which one is better than the other.

35
00:02:52,000 --> 00:02:57,190
Our goal here is to understand the high level difference between these languages and what you need to

36
00:02:57,190 --> 00:02:59,080
know from a DevOps perspective.

37
00:02:59,230 --> 00:03:04,600
That is, if a developer gives you an application code, what do you need to know in order to build,

38
00:03:04,600 --> 00:03:06,910
test or deploy this application?

39
00:03:07,420 --> 00:03:10,960
So I'm going to try and simplify this as much as I can.

40
00:03:11,670 --> 00:03:20,790
Compiled languages such as Java C or C++, or first developed, then compiled and then executed, whereas

41
00:03:20,790 --> 00:03:24,690
interpreted languages are developed and executed.

42
00:03:25,230 --> 00:03:31,140
Compiled languages are first written, then compiled into machine language and then executed.

43
00:03:31,230 --> 00:03:39,210
A compiled program only works on the platform it was designed for in a compiled programming language

44
00:03:39,210 --> 00:03:40,790
such as Java.

45
00:03:40,800 --> 00:03:45,480
The application source code is first developed and it is compiled and then run.

46
00:03:45,630 --> 00:03:52,740
So here we have a simple code in file My class Java, which is then compiled using the Java Sea Command

47
00:03:52,740 --> 00:03:54,900
and specifying the name of the code.

48
00:03:54,930 --> 00:04:01,860
This creates a new file which is by the name my Class class, which is the compiled version of the source

49
00:04:01,860 --> 00:04:02,390
code.

50
00:04:02,400 --> 00:04:08,400
And then we run the application by running the compiled file using the Java Command.

51
00:04:08,940 --> 00:04:11,190
Of course, this is the most simplest form.

52
00:04:11,370 --> 00:04:15,510
We will discuss a lot more about Java later in this course.

53
00:04:16,019 --> 00:04:23,170
In an interpreted programming language, you develop the source code, then you run it using an interpreter.

54
00:04:23,190 --> 00:04:25,740
In this case, we have a simple python application.

55
00:04:25,740 --> 00:04:30,660
We develop it first and then run it using the python interpreter.

56
00:04:30,930 --> 00:04:34,530
But remember, that doesn't mean that it is in compiled at all.

57
00:04:34,680 --> 00:04:40,560
When the program is run, it is implicitly compiled into a byte code and then run.

58
00:04:41,610 --> 00:04:41,790
Hmm.

59
00:04:41,790 --> 00:04:43,460
So I said, Bytecode.

60
00:04:43,470 --> 00:04:46,290
So what's that and why do you need that?

61
00:04:47,640 --> 00:04:54,480
What you see here is the source code of an application, a human readable source code that developers

62
00:04:54,480 --> 00:04:55,000
write.

63
00:04:55,020 --> 00:05:01,080
We want a machine that is our laptop to run this and perform the tasks we ask it to perform.

64
00:05:01,170 --> 00:05:08,130
However, a machine can't understand this code in its current format, so we need to convert this code

65
00:05:08,130 --> 00:05:14,790
into a machine code that is readable by machine that is in zeros and ones.

66
00:05:15,510 --> 00:05:17,550
And that's where a compiler comes in.

67
00:05:17,580 --> 00:05:22,340
A compiler translates code written in one language to another language.

68
00:05:22,350 --> 00:05:28,110
In this case, it translates code from a human readable format in Python into a machine readable ones

69
00:05:28,110 --> 00:05:28,890
and zeros.

70
00:05:29,130 --> 00:05:33,990
That's the most simplified explanation, but it's not really that simple.

71
00:05:34,470 --> 00:05:40,290
So there are a few more steps involved before you can get a source code to be converted to a machine

72
00:05:40,290 --> 00:05:42,180
code and then run on a machine.

73
00:05:42,570 --> 00:05:46,140
And it's done differently in different programming languages.

74
00:05:46,440 --> 00:05:52,710
Say, for instance, if this application was developed on a specific machine with a specific processor

75
00:05:52,710 --> 00:05:59,340
set and we compiled the source code into machine code like this, it would generate a machine code that

76
00:05:59,340 --> 00:06:02,160
is only compatible with similar systems.

77
00:06:02,160 --> 00:06:05,880
It wouldn't work on other systems with different CPU configuration.

78
00:06:06,030 --> 00:06:12,210
So in the past you had to compile the same application on different kinds of systems and generate different

79
00:06:12,210 --> 00:06:15,000
bills to get them to run on all systems.

80
00:06:15,000 --> 00:06:21,030
And that's why the modern compilers do not compile the code directly into machine code.

81
00:06:23,220 --> 00:06:28,650
Instead, it is first converted to an intermediate form called as byte code.

82
00:06:28,680 --> 00:06:33,390
It's usually a file named with the extension p c in Python.

83
00:06:33,810 --> 00:06:40,830
This byte code is then used by the python interpreter to convert to machine code and then execute the

84
00:06:40,830 --> 00:06:41,550
program.

85
00:06:43,000 --> 00:06:48,520
The Python interpreter runs the byte code in an environment called as a virtual machine.

86
00:06:49,060 --> 00:06:53,230
These are not VMs that we refer to in the infrastructure space.

87
00:06:53,260 --> 00:07:00,300
The Python virtual machine is just a virtual computing environment inside which the byte code is executed,

88
00:07:00,310 --> 00:07:04,180
and that's really where our source code gets converted to machine code.

89
00:07:04,920 --> 00:07:10,980
So now with Python VM, we don't really have to compile our application on different machines to generate

90
00:07:10,980 --> 00:07:12,180
different machine codes.

91
00:07:12,660 --> 00:07:18,570
As long as you have the python VM available on a system, our application can run.

92
00:07:19,170 --> 00:07:25,320
And remember all of that happens in the background when you run the application using the python command.

93
00:07:25,800 --> 00:07:30,720
So that's a quick introduction about the different types of programming languages we will be discussing

94
00:07:30,720 --> 00:07:31,560
in this section.

95
00:07:31,800 --> 00:07:37,830
We will talk more about each of these programming languages along with Hands on Labs later in the upcoming

96
00:07:37,830 --> 00:07:38,550
lectures.

97
00:07:39,550 --> 00:07:42,430
But before that, let's talk about packages a bit.

98
00:07:42,850 --> 00:07:48,490
Now, when a developer develops code that can be reused, they share it to the community as packages

99
00:07:48,490 --> 00:07:50,410
that can be reused.

100
00:07:50,410 --> 00:07:57,490
So they are also referred to as modules or libraries, depending on the programming language being used.

101
00:07:58,120 --> 00:08:06,730
These could be libraries to help work with file systems, perform math operations, interact with operating

102
00:08:06,730 --> 00:08:13,120
systems or packages for development, developing different kinds of applications like web servers,

103
00:08:13,120 --> 00:08:20,680
implementing security, networking, etc. Applications use these packages in their code as dependencies,

104
00:08:20,680 --> 00:08:25,150
and so these dependencies must be available for the applications to run.

105
00:08:25,600 --> 00:08:31,060
These dependencies are handled by different tools for different programming languages such as NPM,

106
00:08:31,060 --> 00:08:34,000
for Node.js, PIPP for Python, etc..

107
00:08:34,330 --> 00:08:40,330
While getting into the world of DevOps, understanding the basics of package management can help you

108
00:08:40,330 --> 00:08:46,270
better understand build processes and aid in troubleshooting issues that may arise due to dependency

109
00:08:46,270 --> 00:08:46,840
errors.

110
00:08:47,230 --> 00:08:51,640
We will look at these as well for each programming language in the respective lecture.

111
00:08:52,360 --> 00:08:53,830
Talking about build.

112
00:08:53,830 --> 00:09:01,060
When an application is coded, it goes through a procedure of development, build, test and delivery.

113
00:09:01,600 --> 00:09:08,290
DevOps courses talk extensively about automating these tasks with CI CD pipelines, and before learning

114
00:09:08,290 --> 00:09:13,960
how to automate these tasks, it is important to know what to automate and have a basic understanding

115
00:09:13,960 --> 00:09:16,240
of a software development lifecycle.

116
00:09:16,660 --> 00:09:21,610
Now, I don't intend to bore you with theories on the different software development models.

117
00:09:21,880 --> 00:09:27,220
Instead, we're going to go straight to labs and get a first hand experience of deploying an e commerce

118
00:09:27,220 --> 00:09:28,090
application.

119
00:09:28,510 --> 00:09:34,870
So first we're going to go through the different types of applications like Python, Java, Node.js.

120
00:09:34,900 --> 00:09:41,620
We'll also look at some basic basics of web servers like Apache Web server and an engine X.

121
00:09:41,770 --> 00:09:44,660
And then we'll also look at databases.

122
00:09:44,680 --> 00:09:49,900
And then finally, we're going to look at working through an application and see the entire process

123
00:09:49,900 --> 00:09:54,780
of the software development lifecycle that involves all of these different steps.

124
00:09:54,790 --> 00:10:00,040
And we will see that in action and you will do that yourself in our labs.

125
00:10:00,820 --> 00:10:02,980
So that's it from this lecture.

126
00:10:03,940 --> 00:10:06,410
In the next lecture, we're going to talk about Java.

127
00:10:06,430 --> 00:10:07,840
So I'll see you there.

