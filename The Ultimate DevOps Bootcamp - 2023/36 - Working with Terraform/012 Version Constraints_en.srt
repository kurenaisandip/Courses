1
00:00:00,630 --> 00:00:06,030
In this lecture, we will see how to make use of specific provider versions in TerraForm.

2
00:00:07,300 --> 00:00:13,390
We saw earlier that providers use a plugin based architecture and that most of the popular ones are

3
00:00:13,390 --> 00:00:16,000
available in the Public TerraForm Registry.

4
00:00:17,100 --> 00:00:20,940
Without additional configuration data from init command downloads.

5
00:00:20,940 --> 00:00:25,260
The latest version of the provider plugins that are needed by the configuration files.

6
00:00:26,050 --> 00:00:29,680
However, this is not something that we may desire every time.

7
00:00:30,190 --> 00:00:35,110
The functionality of a provider plugin may vary drastically from one version to another.

8
00:00:36,050 --> 00:00:41,750
Order from configuration may not work as expected when using a version different than the one it was

9
00:00:41,750 --> 00:00:42,470
written in.

10
00:00:43,630 --> 00:00:49,300
Fortunately, we can make sure that a specific version of the provider is used by TerraForm when we

11
00:00:49,300 --> 00:00:50,980
run the TerraForm Init Command.

12
00:00:52,110 --> 00:00:57,450
The instructions to use a specific version of a provider is available in the provided documentation

13
00:00:57,450 --> 00:00:58,470
in the registry.

14
00:00:58,890 --> 00:01:06,090
For example, if we look up the local provider within the registry, the default version is 2.0.0,

15
00:01:06,300 --> 00:01:09,210
which is also the latest version as of this recording.

16
00:01:10,590 --> 00:01:16,500
To use a different version, click on the version tab and it should open a dropdown with all the older

17
00:01:16,500 --> 00:01:17,850
versions of the provider.

18
00:01:18,390 --> 00:01:21,300
Let us select version 1.4.0.

19
00:01:22,350 --> 00:01:27,990
To use this specific version of the local provider, click on the use provider tab on the right.

20
00:01:28,500 --> 00:01:33,270
This should open up the code block that we can copy and paste within our configuration.

21
00:01:34,390 --> 00:01:39,880
Here we are making use of a new block called TerraForm, which is used to configure settings related

22
00:01:39,880 --> 00:01:41,200
to TerraForm itself.

23
00:01:42,340 --> 00:01:45,160
To make use of a specific version of the provider.

24
00:01:45,160 --> 00:01:50,290
We need to make use of another block called required providers inside the TerraForm BLOCK.

25
00:01:51,110 --> 00:01:52,730
And inside the required providers.

26
00:01:52,730 --> 00:01:57,230
BLOCK We can have multiple arguments for every provider that we want to use.

27
00:01:57,740 --> 00:02:03,500
In this example, we have one argument with the key called local for the local provider.

28
00:02:04,490 --> 00:02:10,460
The value for this argument is an object with the source address of the provider and the exact version

29
00:02:10,460 --> 00:02:14,420
that we want to install, which in this case is 1.4.0.

30
00:02:15,700 --> 00:02:21,070
With the TerraForm BLOCK configured to use the version 1.4.0 of the local provider.

31
00:02:21,070 --> 00:02:24,910
When we run a TerraForm in it, we should see a message like this.

32
00:02:25,640 --> 00:02:31,220
Before we wrap up this lecture, let us look at the syntax used to define version constraints in TerraForm.

33
00:02:32,300 --> 00:02:34,610
In the configuration for the local provider.

34
00:02:34,610 --> 00:02:38,600
We have specified version equal to 1.4.0.

35
00:02:39,240 --> 00:02:43,770
This allows TerraForm to find and download this exact version of the local provider.

36
00:02:44,130 --> 00:02:47,550
However, there are other ways to use the version constraint.

37
00:02:48,310 --> 00:02:50,230
If we use the not equal to symbol.

38
00:02:50,230 --> 00:02:54,280
Instead, TerraForm will ensure that this specific version is not downloaded.

39
00:02:54,580 --> 00:03:01,420
In this case, we have specifically asked TerraForm to not use the version 2.0.0, so it downloads the

40
00:03:01,420 --> 00:03:04,930
previous version available, which is 1.4.0.

41
00:03:06,030 --> 00:03:11,400
If you want to reform, to make use of a version lesser than a given version, we can do that by making

42
00:03:11,400 --> 00:03:13,830
use of comparison operators like this.

43
00:03:15,010 --> 00:03:20,710
And to make use of a version greater than a specific version, we can make use of the greater than operator

44
00:03:20,710 --> 00:03:21,610
like this.

45
00:03:23,160 --> 00:03:29,280
We can also combine the comparison operators like this to make use of a specific version within a range.

46
00:03:29,730 --> 00:03:38,040
In this example, we want to make use of any version greater than 1.2.0, but lesser than 2.0.0, but

47
00:03:38,040 --> 00:03:42,090
also not the version 1.4.0 specifically.

48
00:03:42,690 --> 00:03:47,820
As a result, TerraForm downloads the version 1.3.0, which is acceptable in this case.

49
00:03:49,080 --> 00:03:53,520
And finally, we can also make use of pessimistic constraint operators.

50
00:03:53,880 --> 00:03:58,350
This is defined by making use of the tilde greater than symbol like this.

51
00:03:59,090 --> 00:04:04,880
This operator allows TerraForm to download the specific version or any available incremental version

52
00:04:04,880 --> 00:04:06,740
based on the value we provided.

53
00:04:07,280 --> 00:04:14,000
For example, here we have given the value of 1.2 following the tilde greater than symbol.

54
00:04:14,480 --> 00:04:20,269
This means that TerraForm can either download the version 1.2 or incremental versions such as 1.3,

55
00:04:20,269 --> 00:04:24,320
1.4, 1.5 all the way up until 1.9.

56
00:04:24,950 --> 00:04:31,130
However, if you look at the provider documentation, we do not have a version 1.5 or anything above

57
00:04:31,610 --> 00:04:33,930
the maximum version that we can make use of.

58
00:04:33,950 --> 00:04:39,830
In this case, it's 1.4.0 and this is the version that is downloaded when we run TerraForm in it.

59
00:04:40,540 --> 00:04:46,210
Let us make use of another value this time 1.2.0 with the same pessimistic constraint.

60
00:04:46,210 --> 00:04:46,960
Operator.

61
00:04:47,750 --> 00:04:55,520
This time TerraForm can download the version 1.2.0 or the version 1.2.1 or the version 1.2.2.

62
00:04:55,520 --> 00:04:58,070
All the way up until 1.2.9.

63
00:04:58,610 --> 00:05:04,820
Again, we only have a maximum version of 1.2.2 in the registry, and that's the version that will be

64
00:05:04,820 --> 00:05:06,890
downloaded when we run TerraForm in it.

65
00:05:07,710 --> 00:05:09,270
That's it for this lecture.

66
00:05:09,540 --> 00:05:14,100
Head over to the hands on labs and practice working with version constraints in TerraForm.

