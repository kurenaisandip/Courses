1
00:00:05,860 --> 00:00:08,170
Hello and welcome to this lecture.

2
00:00:08,650 --> 00:00:12,850
In this lecture, we will discuss about Kubernetes services.

3
00:00:14,070 --> 00:00:21,240
Kubernetes services enable communication between various components within and outside of the application.

4
00:00:21,660 --> 00:00:29,040
Kubernetes Services helps us connect applications together with other applications or users.

5
00:00:29,250 --> 00:00:36,450
For example, our application has groups of pods running various sections, such as a group for serving

6
00:00:36,450 --> 00:00:42,840
a front end load to users and other group for running backend processes and a third group connecting

7
00:00:42,840 --> 00:00:44,700
to an external data source.

8
00:00:45,210 --> 00:00:50,460
It is services that enable connectivity between these groups of pods.

9
00:00:50,820 --> 00:00:56,610
Services enable the front end application to be made available to end users.

10
00:00:56,790 --> 00:01:03,690
It helps communication between backend and front end pods and helps in establishing connectivity to

11
00:01:03,690 --> 00:01:05,489
an external data source.

12
00:01:05,790 --> 00:01:12,300
Thus, services enable loose coupling between microservices in our application.

13
00:01:14,510 --> 00:01:17,750
Let's take a look at one use case of services.

14
00:01:17,750 --> 00:01:18,410
So far.

15
00:01:18,410 --> 00:01:23,300
We talked about how pods communicate with each other through internal networking.

16
00:01:23,330 --> 00:01:27,170
Let's look at some other aspects of networking in this lecture.

17
00:01:27,650 --> 00:01:30,170
Let's start with external communication.

18
00:01:30,470 --> 00:01:35,390
So we deployed our pod, having a web application running on it.

19
00:01:35,540 --> 00:01:40,070
How do we as an external user access the web page?

20
00:01:40,490 --> 00:01:43,570
First of all, let's look at the existing setup.

21
00:01:43,580 --> 00:01:49,820
The Kubernetes node has an IP address, and that is 192.168.122.

22
00:01:50,060 --> 00:01:54,650
My laptop is on the same network as well, so it has an IP address.

23
00:01:54,650 --> 00:01:58,010
One 92.1 60 8.1. ten.

24
00:01:58,580 --> 00:02:01,340
The internal POD network is in the range.

25
00:02:01,340 --> 00:02:09,320
10.2 40 4.0.0 and the port has an IP 10.2 40 4.0.2.

26
00:02:09,949 --> 00:02:19,430
Clearly, I cannot ping or access the port at address 10.2 40 4.0.2 as it's in a separate network.

27
00:02:19,610 --> 00:02:22,430
So what are the options to see the web page?

28
00:02:23,930 --> 00:02:33,710
First, if we were to ssh into the Kubernetes node at 192.168.1.2 from the node, we would be able to

29
00:02:33,710 --> 00:02:37,250
access the pod's web page by doing a curl.

30
00:02:37,250 --> 00:02:43,730
Or if the node has a GeoEye, we would fire up a browser and see the web page in a browser following

31
00:02:43,730 --> 00:02:44,420
the address.

32
00:02:44,500 --> 00:02:48,230
HTTP 10.2 40 4.0.2.

33
00:02:49,030 --> 00:02:53,830
But this is from inside the Kubernetes node, and that's not what I really want.

34
00:02:54,590 --> 00:03:02,300
I want to be able to access the web server from my own laptop without having to ssh into the node and

35
00:03:02,300 --> 00:03:05,570
simply by accessing the IP of the Kubernetes node.

36
00:03:06,050 --> 00:03:13,340
So we need something in the middle to help us map request to the node from our laptop through the node

37
00:03:13,340 --> 00:03:16,190
to the port running the web container.

38
00:03:17,220 --> 00:03:20,940
This is where the Kubernetes service comes into play.

39
00:03:21,060 --> 00:03:28,830
The Kubernetes service is an object just like pards replica set or deployments that we worked with before.

40
00:03:28,920 --> 00:03:36,600
One of its use case is to listen to a port on the node and forward request on that port to a port on

41
00:03:36,600 --> 00:03:39,120
the port running the web application.

42
00:03:39,660 --> 00:03:47,040
This type of service is known as a node port service because the service listens to a port on the node

43
00:03:47,040 --> 00:03:49,320
and forward requests to the port.

44
00:03:49,740 --> 00:03:53,910
There are other kinds of services available which we will now discuss.

45
00:03:55,810 --> 00:03:58,660
The first one is what we discussed already.

46
00:03:58,690 --> 00:04:04,840
Node Port where the service makes an internal port accessible on a port on the node.

47
00:04:05,710 --> 00:04:14,110
The second is cluster IP, and in this case the service creates a virtual IP inside the cluster to enable

48
00:04:14,110 --> 00:04:20,649
communication between different services such as a set of front end servers to a set of backend servers.

49
00:04:21,360 --> 00:04:28,110
The third type is a load balancer where it provisions a load balancer for our application in supported

50
00:04:28,110 --> 00:04:29,460
cloud providers.

51
00:04:29,760 --> 00:04:35,790
A good example of that would be to distribute load across the different web servers in your front end

52
00:04:35,790 --> 00:04:36,360
tier.

53
00:04:36,870 --> 00:04:41,250
We will now look at each of these in a bit more detail along with some demos.

54
00:04:41,820 --> 00:04:46,470
In this lecture we will discuss about the Node port Kubernetes service.

55
00:04:48,000 --> 00:04:55,260
Getting back to Node Port a few slides back, we discussed about external access to the application.

56
00:04:55,650 --> 00:05:02,790
We said that a service can help us by mapping a port on the node to a port on the port.

57
00:05:05,050 --> 00:05:07,660
Let's take a closer look at the service.

58
00:05:07,960 --> 00:05:11,380
If you look at it, there are three ports involved.

59
00:05:11,650 --> 00:05:20,200
The port on the pod where the actual web server is running is 80 and it is referred to as the target

60
00:05:20,200 --> 00:05:25,030
port because that is where the service forwards the request to.

61
00:05:25,810 --> 00:05:29,470
The second port is the port on the service itself.

62
00:05:30,190 --> 00:05:32,770
It is simply referred to as the port.

63
00:05:32,800 --> 00:05:37,090
Remember, these terms are from the viewpoint of the service.

64
00:05:37,600 --> 00:05:44,190
The service is in fact like a virtual server inside the node, inside the cluster.

65
00:05:44,200 --> 00:05:51,310
It has its own IP address and that IP address is called the cluster IP of the service.

66
00:05:51,880 --> 00:05:58,900
And finally, we have the port on the node itself, which we use to access the web server externally,

67
00:05:58,900 --> 00:06:01,750
and that is known as the node port.

68
00:06:01,990 --> 00:06:06,010
As you can see, it is set to 30,008.

69
00:06:06,520 --> 00:06:18,730
That is because Node ports can only be in a valid range, which by default is from 30000 to 32767.

70
00:06:20,720 --> 00:06:23,450
Let's now look at how to create the service.

71
00:06:23,570 --> 00:06:30,380
Just like how we created a deployment replica set or pod in the past, we will use a definition file

72
00:06:30,380 --> 00:06:31,640
to create a service.

73
00:06:32,210 --> 00:06:35,840
The high level structure of the file remains the same as before.

74
00:06:35,840 --> 00:06:40,760
We have the API version kind, metadata and spec sections.

75
00:06:41,180 --> 00:06:43,970
The API version is going to be v one.

76
00:06:44,450 --> 00:06:47,060
The kind is of course, service.

77
00:06:47,390 --> 00:06:51,610
The metadata will have a name and that will be the name of the service.

78
00:06:51,620 --> 00:06:54,740
It can have labels, but we don't need that for now.

79
00:06:55,280 --> 00:07:02,900
Next we have spec and as always, this is the most crucial part of the file as this is where we will

80
00:07:02,900 --> 00:07:05,150
be defining the actual services.

81
00:07:05,150 --> 00:07:12,170
And this is the part of a definition file that differs between different objects In the specs section

82
00:07:12,170 --> 00:07:15,500
of a service we have type and ports.

83
00:07:15,800 --> 00:07:19,430
The type refers to the type of service we are creating.

84
00:07:19,430 --> 00:07:25,040
As discussed before, it could be cluster IP, node port or load balancer.

85
00:07:25,340 --> 00:07:30,830
In this case, since we are creating a node port, we will set it as node port.

86
00:07:31,280 --> 00:07:34,190
The next part of this spec is ports.

87
00:07:34,370 --> 00:07:39,920
This is where we input information regarding what we discussed on the left side of the screen.

88
00:07:40,930 --> 00:07:45,280
The first type of port is the target port, which we will set to 80.

89
00:07:46,600 --> 00:07:54,970
The next one is simply port, which is the port on the service object, and we will set that to 80 as

90
00:07:54,970 --> 00:07:55,510
well.

91
00:07:57,340 --> 00:08:05,560
The third is Node Port, which we will set to 30,008 or any number in the valid range.

92
00:08:06,040 --> 00:08:11,260
Remember that out of these the only mandatory field is port.

93
00:08:12,330 --> 00:08:18,660
If you don't provide a target port, it is assumed to be the same as port.

94
00:08:18,660 --> 00:08:28,080
And if you don't provide a node port, a free port in the valid range between 30,030 2007 67 is automatically

95
00:08:28,080 --> 00:08:28,980
allocated.

96
00:08:29,910 --> 00:08:32,700
Also note that ports is an array.

97
00:08:32,700 --> 00:08:38,760
So note the dash under the port section that indicate the first element in the array.

98
00:08:38,789 --> 00:08:43,409
You can have multiple such port mappings within a single service.

99
00:08:44,110 --> 00:08:48,710
So we have all the information in, but something is really missing.

100
00:08:48,730 --> 00:08:54,970
There is nothing here in the definition file that connects the service to the pod.

101
00:08:55,390 --> 00:09:02,080
We have simply specified the target port, but we didn't mention the target port on which pod.

102
00:09:02,290 --> 00:09:07,400
There could be hundreds of other pods with web services running on Port 80.

103
00:09:07,420 --> 00:09:08,950
So how do we do that?

104
00:09:09,370 --> 00:09:15,470
As we did with the replica sets previously and a technique that you will see very often in Kubernetes,

105
00:09:15,610 --> 00:09:19,390
we will use labels and selectors to link these together.

106
00:09:19,720 --> 00:09:23,020
We know that the pod was created with a label.

107
00:09:23,200 --> 00:09:27,430
We need to bring that label into the service definition file.

108
00:09:28,680 --> 00:09:33,250
So we have a new property in the specs section and that is called selector.

109
00:09:33,270 --> 00:09:35,520
Just like in a replica set.

110
00:09:35,670 --> 00:09:42,990
And deployment definition files under the selector provide a list of labels to identify the pod.

111
00:09:43,750 --> 00:09:48,160
For this refer to the pod definition file used to create the pod.

112
00:09:48,760 --> 00:09:53,860
Pull the labels from the pod definition file and place it under the selector section.

113
00:09:54,800 --> 00:09:57,320
This links the service to the pod.

114
00:09:57,710 --> 00:10:04,220
Once done, create the service using the cube control, create command and input the service definition

115
00:10:04,220 --> 00:10:04,790
file.

116
00:10:04,790 --> 00:10:11,420
And there you have the service created to see the created service run the cube control, get services

117
00:10:11,420 --> 00:10:15,740
command that lists the service, the cluster IP and the mapped ports.

118
00:10:16,010 --> 00:10:24,470
The type is node port as we created and the port on the node is set to 30,008 because that's the port

119
00:10:24,470 --> 00:10:27,050
that we specified in the definition file.

120
00:10:27,440 --> 00:10:35,690
We can now use this port to access the web service using CURL or a web browser, so called to 192 168

121
00:10:35,690 --> 00:10:43,790
1.2, which is the IP of the node, and then use the port 30,008 to access the web server.

122
00:10:44,670 --> 00:10:51,760
So far, we talked about a service mapped to a single pod, but that's not the case all the time.

123
00:10:51,780 --> 00:10:56,280
What do you do when you have multiple pods in the production environment?

124
00:10:56,280 --> 00:11:02,250
You have multiple instances of your web application running for high availability and load balancing

125
00:11:02,250 --> 00:11:03,060
purposes.

126
00:11:03,570 --> 00:11:08,370
In this case, we have multiple similar pods running our web application.

127
00:11:09,130 --> 00:11:15,640
They all have the same labels with a key app and set to a value of my app.

128
00:11:15,670 --> 00:11:23,500
The same label is used as a selector during the creation of the service, so when the service is created,

129
00:11:23,500 --> 00:11:29,260
it looks for a matching pod with the label and finds three of them.

130
00:11:29,860 --> 00:11:37,060
The service then automatically selects all the three parts as endpoints to forward the external request

131
00:11:37,060 --> 00:11:38,500
coming from the user.

132
00:11:40,140 --> 00:11:44,610
You don't have to do any additional configuration to make this happen.

133
00:11:45,300 --> 00:11:51,360
And if you're wondering what algorithm it uses to balance the load across the three different parts,

134
00:11:51,540 --> 00:11:54,060
it uses a random algorithm.

135
00:11:54,840 --> 00:12:01,440
Thus the service acts as a built in load balancer to distribute load across different pods.

136
00:12:03,790 --> 00:12:09,790
And finally, let's look at what happens when the parts are distributed across multiple nodes.

137
00:12:10,030 --> 00:12:15,820
In this case, we have the web application on pods, on separate nodes in the cluster.

138
00:12:15,970 --> 00:12:24,010
When we create a service without us having to do any additional configuration, Kubernetes automatically

139
00:12:24,010 --> 00:12:31,150
creates a service that spans across all the nodes in the cluster and maps the target port to the same

140
00:12:31,150 --> 00:12:34,240
node port on all the nodes in the cluster.

141
00:12:35,060 --> 00:12:42,440
This way you can access your application using the IP of any node in the cluster and using the same

142
00:12:42,440 --> 00:12:46,550
port number, which in this case is 30,008.

143
00:12:47,600 --> 00:12:51,530
As you can see, using the IPO of any of these nodes.

144
00:12:51,530 --> 00:12:58,160
And I'm trying to curl to the same port and the same port is made available on all the nodes part of

145
00:12:58,160 --> 00:12:58,970
the cluster.

146
00:12:59,830 --> 00:13:07,090
To summarize in any case, whether it be a single port on a single node, multiple ports on a single

147
00:13:07,090 --> 00:13:14,500
node or multiple ports on multiple nodes, the service is created exactly the same without you having

148
00:13:14,500 --> 00:13:17,890
to do any additional steps during the service creation.

149
00:13:18,280 --> 00:13:25,420
When ports are removed or added, the service is automatically updated, making it highly flexible and

150
00:13:25,420 --> 00:13:26,200
adaptive.

151
00:13:26,730 --> 00:13:32,700
Once created, you won't typically have to make any additional configuration changes.

152
00:13:34,150 --> 00:13:35,710
That's it for this lecture.

153
00:13:35,740 --> 00:13:39,280
Head over to the demo and I will see you in the next lecture.

