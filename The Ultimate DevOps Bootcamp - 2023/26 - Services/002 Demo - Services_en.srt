1
00:00:00,210 --> 00:00:04,260
In this demo, we're going to take a look at services in Kubernetes.

2
00:00:05,280 --> 00:00:09,300
In the previous demo, we created a few pods by creating a deployment.

3
00:00:09,300 --> 00:00:11,730
So let's check the status of that first.

4
00:00:13,750 --> 00:00:20,800
So we have a deployment called my App deployment, and it has six replicas, which is essentially six

5
00:00:20,800 --> 00:00:23,350
pods running in the Kubernetes cluster.

6
00:00:25,430 --> 00:00:30,740
So now we have an application which is created to run on this cluster.

7
00:00:31,130 --> 00:00:37,820
But in order for the end user to access it on their web browser, we have to create a service.

8
00:00:38,150 --> 00:00:41,900
And to do this, let's jump back to our editor.

9
00:00:42,350 --> 00:00:44,900
We have created a new directory called Service.

10
00:00:45,260 --> 00:00:51,350
And within this service directory, we're going to create a new file called Service Definition YAML.

11
00:00:52,370 --> 00:00:57,530
Note that you don't really need to follow this directory structure as I'm doing.

12
00:00:57,530 --> 00:01:00,470
I'm just following it to organize the examples.

13
00:01:00,950 --> 00:01:03,800
You could simply have all the files in the same location.

14
00:01:03,800 --> 00:01:11,090
And just like before, the first thing that goes in is the root element, the API version, and for

15
00:01:11,090 --> 00:01:14,310
service it should be set to v one for kind.

16
00:01:14,330 --> 00:01:16,160
We're going to specify service.

17
00:01:16,460 --> 00:01:23,000
So let's look that up from the list and we're going to add a metadata with the name of the service,

18
00:01:23,000 --> 00:01:25,730
which we can say my app service.

19
00:01:27,460 --> 00:01:28,300
And this.

20
00:01:28,300 --> 00:01:31,780
And underneath that we're going to add the spec section.

21
00:01:33,000 --> 00:01:39,840
And the first property that we will create is the type of service which we will set to Node port.

22
00:01:40,890 --> 00:01:48,540
Now our goal is to be able to access our application on a port on the node, which is the mini cube

23
00:01:48,540 --> 00:01:56,640
node in our case, and then we will add the port and the default port at which Engine X listens, which

24
00:01:56,640 --> 00:01:57,690
is 80.

25
00:01:57,840 --> 00:02:03,600
And we're also going to add our target port, which is also port 80.

26
00:02:03,600 --> 00:02:06,390
So this is basically the port on the service itself.

27
00:02:06,750 --> 00:02:13,700
And next we're going to add a node port, which we can set to a value such as 30,004.

28
00:02:13,710 --> 00:02:19,650
So it could be any value between 30,030 2767.

29
00:02:20,520 --> 00:02:28,710
And this node port is is the port on the node, the worker node, which is the mini cube node on which

30
00:02:29,040 --> 00:02:31,260
the application will be made accessible.

31
00:02:31,830 --> 00:02:38,910
Next, we're going to add a selector which helps us bind our service to the port with the same label.

32
00:02:38,910 --> 00:02:45,870
So quickly, let's check the deployment YAML file and you'll notice that the label for the port is app

33
00:02:45,870 --> 00:02:46,980
set to my app.

34
00:02:46,980 --> 00:02:50,850
So let us add the same value here under the selector section.

35
00:02:50,940 --> 00:02:57,150
So once this has been completed, our service definition file is complete and we can proceed to create

36
00:02:57,450 --> 00:02:59,370
this on our clusters.

37
00:02:59,490 --> 00:03:06,480
And I'm going to save it here and jump back to my terminal and let me navigate to the new directory

38
00:03:06,480 --> 00:03:08,310
that we created.

39
00:03:09,300 --> 00:03:12,510
And here is our service definition file.

40
00:03:13,590 --> 00:03:19,950
So I'm going to create the service using the cube code, create command with the F option, and specify

41
00:03:19,950 --> 00:03:23,490
the service definition YAML file as the input.

42
00:03:24,180 --> 00:03:27,450
I run this command and the service has been created.

43
00:03:28,110 --> 00:03:30,990
We can now run the get service command.

44
00:03:30,990 --> 00:03:38,910
And here you'll notice that the new service is visible and the type of the service is node port, which

45
00:03:38,910 --> 00:03:43,230
because we want it to be accessible on the port on the worker node.

46
00:03:43,320 --> 00:03:46,960
And here is the cluster IP, which is also created for the service.

47
00:03:47,070 --> 00:03:53,130
Now it's an address created for the service within the Internet internal cluster network.

48
00:03:53,490 --> 00:03:58,800
And here is the port on the worker node that we can use to access our application.

49
00:03:58,950 --> 00:04:05,040
So if you know the IP of the worker node, you can simply go to a browser and just type in the IP of

50
00:04:05,040 --> 00:04:10,080
the worker node followed by the port number, and you should be able to access this application.

51
00:04:10,380 --> 00:04:16,649
Now, since we are running this on Mini Cube, we can also run the mini Cube Service command, followed

52
00:04:16,649 --> 00:04:24,450
by the name of the service, which is the my app Dash service and use the option dash dash URL and it

53
00:04:24,450 --> 00:04:29,970
should print us the URL with the service where the service is available.

54
00:04:30,240 --> 00:04:35,040
So let's try to access this on a browser so you can just copy this URL.

55
00:04:35,100 --> 00:04:44,490
Go to your browser and paste that URL in the browser and we see that the default engine x web page.

56
00:04:44,790 --> 00:04:52,560
So that confirms that the engine X application is up and running and we're able to access it on a web

57
00:04:52,560 --> 00:04:53,280
browser.

58
00:04:55,400 --> 00:04:59,240
Well, that's it for this demo, and I will see you in the next one.

