1
00:00:00,150 --> 00:00:04,590
So we just saw how the voting application works on Docker.

2
00:00:04,860 --> 00:00:08,310
Let's now see how to deploy it on Kubernetes.

3
00:00:08,640 --> 00:00:17,370
So it's important to have a clear idea of what we are trying to achieve and plan accordingly before

4
00:00:17,370 --> 00:00:18,300
we get started.

5
00:00:18,300 --> 00:00:24,810
So we already know how the application works, and it's a good idea to write down what we plan to do.

6
00:00:24,840 --> 00:00:32,159
So our goal is to deploy these containers, these applications as containers on a Kubernetes cluster

7
00:00:32,159 --> 00:00:39,840
and then enable connectivity between the containers so that the applications can access each other and

8
00:00:39,840 --> 00:00:47,280
the databases and then enable external access for the external facing applications, which are the voting

9
00:00:47,280 --> 00:00:51,780
and the result app so that the users can access the Web browser.

10
00:00:52,160 --> 00:00:52,680
Right.

11
00:00:52,680 --> 00:00:55,440
So how do we go about this?

12
00:00:55,770 --> 00:01:01,080
Now we know that we cannot deploy containers directly on Kubernetes.

13
00:01:01,320 --> 00:01:07,660
We learned that the smallest object that we can create on a Kubernetes cluster is a pod.

14
00:01:07,680 --> 00:01:17,100
So we must first deploy these applications as a pod on our Kubernetes cluster, or we could deploy them

15
00:01:17,100 --> 00:01:21,900
as replica sets or deployments as we have seen through throughout this course.

16
00:01:21,900 --> 00:01:28,410
But first, for the sake of simplicity, we will stick to pods in this lecture.

17
00:01:28,890 --> 00:01:33,090
And later, we will see how to easily convert that to a deployment.

18
00:01:33,270 --> 00:01:39,990
So once the pods are deployed, the next step is to enable connectivity between the services.

19
00:01:40,320 --> 00:01:45,090
So it's important to know what the connectivity requirements are.

20
00:01:45,090 --> 00:01:51,420
So we must be very clear about what application requires access to what services.

21
00:01:51,540 --> 00:01:57,660
We know that the readiness database is accessed by the voting app and the worker app.

22
00:01:57,660 --> 00:02:03,680
The voting app saves the vote to the Redis database and the worker app reads the vote from the RADIUS

23
00:02:03,690 --> 00:02:04,470
database.

24
00:02:04,680 --> 00:02:11,790
We know that the PostgreSQL database is accessed by the worker app to update it with the total count

25
00:02:11,790 --> 00:02:18,900
of votes, and it's also accessed by the result app to read the total count of votes to be displayed

26
00:02:18,900 --> 00:02:22,440
in the resulting web page in the browser.

27
00:02:22,650 --> 00:02:31,140
So we know that the voting app is accessed by the external users, the voters, and the result app is

28
00:02:31,140 --> 00:02:35,100
also accessed by the external users to view the results.

29
00:02:35,250 --> 00:02:41,910
So most of the components are being accessed by another component except for the worker app.

30
00:02:41,940 --> 00:02:46,170
Note that the worker app is not being accessed by anyone.

31
00:02:46,650 --> 00:02:53,910
You can see arrows going into all of these components, but there are no arrows going into worker,

32
00:02:53,910 --> 00:02:59,490
which means none of the other components or external users are accessing the worker app.

33
00:02:59,520 --> 00:03:06,780
The worker app simply reads the count of votes from the database and then updates the total count of

34
00:03:06,780 --> 00:03:10,080
votes on the PostgreSQL database.

35
00:03:10,080 --> 00:03:16,440
So none of the other components, nor the external users ever access the worker app.

36
00:03:16,680 --> 00:03:24,270
Now, while the voting app has a Python web server that listens on Port 80 and the result app also has

37
00:03:24,270 --> 00:03:32,070
a Node.js based server that license on Port 80 and the Redis database has a service that listens on

38
00:03:32,070 --> 00:03:38,670
Port 6379 and the PostgreSQL database has a service that listens on Port 5432.

39
00:03:39,150 --> 00:03:44,640
The worker app has no service because it's just a worker and it's not accessed by any other service

40
00:03:44,640 --> 00:03:45,720
or external users.

41
00:03:45,720 --> 00:03:47,430
So keep that in mind.

42
00:03:47,790 --> 00:03:51,300
So how do you make one component accessible by another?

43
00:03:51,300 --> 00:03:56,880
Say, for example, how do you make the reddest database accessible by the voting app?

44
00:03:57,240 --> 00:04:02,010
Should the voting app use the IP address of the Redis pod perhaps?

45
00:04:02,190 --> 00:04:04,350
No, because that can change.

46
00:04:04,350 --> 00:04:07,260
The IP of the pod can change if the pod restarts.

47
00:04:07,620 --> 00:04:12,930
And you may also run into issues when you try to scale your applications in the future.

48
00:04:13,500 --> 00:04:16,589
The right way to do it is to use a service.

49
00:04:16,769 --> 00:04:23,220
Now we learned that a service can be used to expose an application to other applications or users for

50
00:04:23,220 --> 00:04:24,570
external access.

51
00:04:24,750 --> 00:04:31,890
So we will create a service for the Redis pod so that it can be accessed by the voting app and the worker

52
00:04:31,890 --> 00:04:32,510
app.

53
00:04:32,520 --> 00:04:38,580
And we will call it a readiness service and it will be accessible anywhere within the cluster by the

54
00:04:38,580 --> 00:04:40,770
name of the service readiness.

55
00:04:40,950 --> 00:04:43,440
So why is that name important?

56
00:04:43,620 --> 00:04:52,680
The source code within the voting app and the worker app are hardcoded to point to a radius database

57
00:04:52,680 --> 00:04:55,830
running on a host by the name Redis.

58
00:04:56,220 --> 00:04:59,960
So it's important to name your service as Redis.

59
00:05:00,060 --> 00:05:03,050
So that these applications can connect to the reddest database.

60
00:05:03,060 --> 00:05:09,450
And this is not a best practice to hard code stuff like this within the source code of an application.

61
00:05:09,600 --> 00:05:15,150
Instead, you should be using environment variables or something, but for the sake of simplicity we

62
00:05:15,150 --> 00:05:20,970
will just follow this application as it is developed right now.

63
00:05:20,970 --> 00:05:29,280
These services are not to be accessed outside the cluster, so they should just be of type cluster IP.

64
00:05:29,460 --> 00:05:37,860
So we will follow the the same approach of creating a service for the PostgreSQL port so that the PostgreSQL

65
00:05:37,860 --> 00:05:41,970
DB can be accessed by the worker and the result app.

66
00:05:42,150 --> 00:05:45,720
So what should we name the PostgreSQL service?

67
00:05:45,930 --> 00:05:52,050
If you look at the source code of the result app and the worker app, you will see that they are looking

68
00:05:52,050 --> 00:05:54,150
for a database at the address.

69
00:05:54,150 --> 00:06:01,140
DB So the service that we create for PostgreSQL should be named DB.

70
00:06:01,350 --> 00:06:07,890
Also note that while connecting to the database, the worker and the result apps passing a username

71
00:06:07,890 --> 00:06:13,260
and password to connect to the database, both of which are set to Postgres.

72
00:06:13,260 --> 00:06:22,500
So when we deploy the DB pod, we must make sure that we set the these credentials for it as the initial

73
00:06:22,500 --> 00:06:25,320
set of credentials to while creating the database.

74
00:06:25,980 --> 00:06:30,450
Now the next task is to enable external access.

75
00:06:30,450 --> 00:06:36,050
So for this we saw that we could use a service with a type set to node port.

76
00:06:36,060 --> 00:06:44,100
So we create a services for voting app and the result app and set their type to node port.

77
00:06:44,460 --> 00:06:49,980
Now we could decide on what port we are going to make them available on, and it would be a high port

78
00:06:50,310 --> 00:06:52,650
with a port number greater than 30,000.

79
00:06:53,220 --> 00:06:55,920
So we'll do that when we create the service.

80
00:06:55,920 --> 00:06:59,400
So we are done and we have the high level steps ready.

81
00:06:59,490 --> 00:07:07,020
So to summarize, we will be deploying five ports in total and we have four services, one for readiness,

82
00:07:07,020 --> 00:07:09,960
another for Postgres, both of which are internal services.

83
00:07:09,960 --> 00:07:15,390
So they are of type cluster IP, and we then have external facing services for voting app and the result

84
00:07:15,390 --> 00:07:15,930
app.

85
00:07:15,960 --> 00:07:21,390
However, we have no service for the worker pod and this is because it is not running any service that

86
00:07:21,390 --> 00:07:25,080
must be accessed by another application or external users.

87
00:07:25,080 --> 00:07:29,370
So it is just a worker process that reads from one database and updates another.

88
00:07:29,400 --> 00:07:31,580
So it's not going to require a service.

89
00:07:31,590 --> 00:07:37,350
Now I say that again as that's a common question that I get when we talk about services.

90
00:07:37,740 --> 00:07:40,140
Why does this worker not require a service?

91
00:07:40,350 --> 00:07:48,270
So a service is only required if the application has some kind of process or database service or web

92
00:07:48,270 --> 00:07:52,710
service that needs to be exposed, that needs to be accessed by others.

93
00:07:52,830 --> 00:07:55,830
In this case, that's that's not true for the worker app.

94
00:07:56,160 --> 00:07:59,520
Now, before we we get started with the deployment.

95
00:07:59,610 --> 00:08:03,950
Note that we will be using the following Docker images for these applications.

96
00:08:03,960 --> 00:08:11,670
So these images are built from a fork of the original developed at the Docker samples repository.

97
00:08:12,360 --> 00:08:21,090
The image names are called cloud slash example Voting app underscore vote with a tag of V one and then

98
00:08:21,090 --> 00:08:23,460
again worker v one.

99
00:08:23,640 --> 00:08:24,780
Result v one.

100
00:08:24,990 --> 00:08:32,130
And for the databases we will use the official readiness and PostgreSQL releases that are available.

101
00:08:32,480 --> 00:08:34,440
All right, so that's it for now.

102
00:08:34,890 --> 00:08:37,950
And we will see this in action in the upcoming demo.

