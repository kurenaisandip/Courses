1
00:00:06,950 --> 00:00:09,020
Hello and welcome to this lecture.

2
00:00:09,470 --> 00:00:17,810
In this lecture we will try and understand microservices architecture using a simple web application.

3
00:00:18,050 --> 00:00:25,910
We will then try and deploy this web application on multiple different Kubernetes platforms such as

4
00:00:25,910 --> 00:00:27,860
Google Cloud Platform.

5
00:00:28,130 --> 00:00:34,670
I'm going to use a simple application developed by Docker to demonstrate the various features available

6
00:00:34,670 --> 00:00:37,640
in running an application stack on Docker.

7
00:00:38,320 --> 00:00:45,460
So let's first get familiarized with the application because we will be working with the same application

8
00:00:45,460 --> 00:00:48,490
in different sections through the rest of this course.

9
00:00:49,750 --> 00:00:57,700
This is a sample voting application which provides an interface for a user to vote and another interface

10
00:00:57,700 --> 00:00:59,080
to show the results.

11
00:00:59,500 --> 00:01:05,620
The application consists of various components, such as the voting app, which is a web application

12
00:01:05,620 --> 00:01:13,060
developed in Python to provide the user with an interface to choose between two options a cat and a

13
00:01:13,060 --> 00:01:13,630
dog.

14
00:01:14,710 --> 00:01:18,910
When you make a selection, the vote is stored in readers.

15
00:01:19,210 --> 00:01:24,670
For those of you who are new to read, this read is in this case serves as a database in memory.

16
00:01:24,970 --> 00:01:30,110
This vote is then processed by the worker, which is an application written in dot net.

17
00:01:30,130 --> 00:01:37,240
The worker application takes the new vote and updates the persistent database, which is a PostgreSQL

18
00:01:37,240 --> 00:01:38,170
in our case.

19
00:01:38,440 --> 00:01:43,990
The PostgreSQL simply has a table with the number of votes for each category.

20
00:01:44,020 --> 00:01:45,520
Cats and dogs.

21
00:01:45,760 --> 00:01:51,100
In this case, it increments the number of votes for cats as our vote was for cats.

22
00:01:51,190 --> 00:01:57,100
Finally, the result of the vote is displayed in a web interface, which is another web application

23
00:01:57,100 --> 00:01:58,960
developed in Node.js.

24
00:01:59,110 --> 00:02:06,430
This resulting application reads the count of votes from the Postgres SQL database and displays it to

25
00:02:06,430 --> 00:02:07,210
the user.

26
00:02:07,820 --> 00:02:14,450
So that is the architecture and data flow of this simple voting application stack.

27
00:02:15,190 --> 00:02:22,180
As you can see, this sample application is built with a combination of different services, different

28
00:02:22,180 --> 00:02:29,590
development tools and multiple different development platforms such as Python, Node.js, dot, net,

29
00:02:29,590 --> 00:02:30,430
etc..

30
00:02:30,850 --> 00:02:38,080
This sample application will be used to showcase how easy it is to set up an entire application stack

31
00:02:38,080 --> 00:02:41,440
consisting of diverse components in Docker.

32
00:02:42,800 --> 00:02:51,050
Let us see how we can put together this application stack on a single Docker engine using Docker run

33
00:02:51,050 --> 00:02:51,800
commands.

34
00:02:51,920 --> 00:02:59,390
Let us assume that all images of applications are already built and are available on Docker repository.

35
00:02:59,660 --> 00:03:01,910
Let us start with the data layer.

36
00:03:02,150 --> 00:03:08,180
First, we run the Docker run command to start an instance of Redis by running the Docker run Redis

37
00:03:08,180 --> 00:03:08,810
command.

38
00:03:09,320 --> 00:03:16,340
We will add the dash D parameter to run this container in the background and we will also name the container.

39
00:03:16,340 --> 00:03:17,270
Read this.

40
00:03:18,150 --> 00:03:20,670
Now naming the containers is important.

41
00:03:21,210 --> 00:03:22,740
Why is that important?

42
00:03:22,770 --> 00:03:23,770
Hold that thought.

43
00:03:23,790 --> 00:03:25,470
We will come to that in a bit.

44
00:03:26,090 --> 00:03:32,540
Next, we will deploy the Postgres SQL database by running the Docker run Postgres Command.

45
00:03:33,350 --> 00:03:41,000
This time too, we will add the RD option to run this in the background and name this container DB for

46
00:03:41,000 --> 00:03:41,810
database.

47
00:03:42,500 --> 00:03:45,620
Next, we will start with the application services.

48
00:03:45,950 --> 00:03:51,680
We will deploy a front end app for voting interface by running an instance of voting app image.

49
00:03:52,070 --> 00:03:55,580
Run the Docker, run command and name the instance vote.

50
00:03:55,850 --> 00:04:00,650
Since this is a web server, it has a web UI instance running on Port 80.

51
00:04:00,860 --> 00:04:06,800
We will publish that port two 5000 on the host system so we can access it from a browser.

52
00:04:07,010 --> 00:04:12,470
Next, we will deploy the results web application that shows the results to the user.

53
00:04:12,920 --> 00:04:20,660
For this we deploy a container using the results dash app image and publish port 82 port 5001 on the

54
00:04:20,660 --> 00:04:21,290
host.

55
00:04:21,529 --> 00:04:26,150
This way we can access the web UI of the resulting app on a browser.

56
00:04:26,390 --> 00:04:31,430
Finally, we deploy the worker by running an instance of the worker image.

57
00:04:33,210 --> 00:04:33,810
Okay.

58
00:04:33,960 --> 00:04:35,400
Now, this is all good.

59
00:04:35,400 --> 00:04:39,360
And we can see that all the instances are running on the host.

60
00:04:39,750 --> 00:04:41,910
But there is some problem.

61
00:04:42,000 --> 00:04:43,950
It just does not seem to work.

62
00:04:44,130 --> 00:04:50,460
The problem is that we have successfully run all the different containers, but we haven't actually

63
00:04:50,460 --> 00:04:51,870
linked them together.

64
00:04:52,080 --> 00:04:58,020
As in, we haven't told the voting web application to use this particular red instance.

65
00:04:58,230 --> 00:05:01,260
There could be multiple radius instances running.

66
00:05:01,500 --> 00:05:08,190
We haven't told the worker and the resulting app to use this particular Postgres SQL database that we

67
00:05:08,190 --> 00:05:08,700
ran.

68
00:05:09,350 --> 00:05:10,700
So how do we do that?

69
00:05:11,350 --> 00:05:13,450
That is where we use links.

70
00:05:13,690 --> 00:05:19,720
Link is a command line option which can be used to link to containers together.

71
00:05:20,080 --> 00:05:28,000
For example, the voting app web service is dependent on the ready service when the web server starts.

72
00:05:28,030 --> 00:05:34,900
As you can see in this piece of code on the web server, it looks for a ready service running on host

73
00:05:34,900 --> 00:05:35,710
readiness.

74
00:05:36,040 --> 00:05:42,940
But the voting app container cannot resolve a host by the name readies to make the voting app aware

75
00:05:42,940 --> 00:05:44,380
of the ready service.

76
00:05:44,410 --> 00:05:50,620
We add a link option while running the voting app container to link it to the red disk container.

77
00:05:50,860 --> 00:05:57,430
Adding a dash dash link option to the Docker run command and specifying the name of the Redis container,

78
00:05:57,430 --> 00:06:03,580
which is which in this case is Redis, followed by a colon and the name of the host that the voting

79
00:06:03,580 --> 00:06:07,300
app is looking for, which is also Redis in this case.

80
00:06:08,110 --> 00:06:15,190
Remember that this is why we named the Container when we ran it the first time so we could use its name

81
00:06:15,190 --> 00:06:16,750
while creating a link.

82
00:06:17,830 --> 00:06:24,610
What this is in fact, doing is it creates an entry into the Etsy host file on the voting app container.

83
00:06:24,610 --> 00:06:29,830
Adding an entry with the host name readies with the internal IP of the red disk container.

84
00:06:30,670 --> 00:06:36,970
Similarly, we add a link for the result app to communicate with the database by adding a link option

85
00:06:36,970 --> 00:06:40,180
to refer the database by the name DB.

86
00:06:41,080 --> 00:06:46,960
As you can see in this source code of the application, it makes an attempt to connect to a Postgres

87
00:06:46,960 --> 00:06:49,600
database on host DB.

88
00:06:50,170 --> 00:06:56,650
Finally, the worker application requires access to both the Redis as well as the Postgres database.

89
00:06:56,650 --> 00:07:03,310
So we add two links to the worker application, one link to link the register and the other link to

90
00:07:03,310 --> 00:07:05,050
link Postgres database.

91
00:07:06,820 --> 00:07:14,560
Note that using links this way is deprecated and the support may be removed in future in Docker.

92
00:07:15,070 --> 00:07:22,480
This is because, as we will see in some time advanced and newer concepts in Docker, Swarm and networking

93
00:07:22,480 --> 00:07:27,160
supports better ways of achieving what we just did here with links.

94
00:07:27,700 --> 00:07:33,100
But I wanted to mention that anyway, so you learn the concept from the very basics.

