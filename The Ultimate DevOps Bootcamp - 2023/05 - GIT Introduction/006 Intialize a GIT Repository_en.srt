1
00:00:00,120 --> 00:00:07,380
First, let's initialize a local git repository by going into our project folder and initializing git.

2
00:00:07,590 --> 00:00:11,040
We can initialize git by typing git init.

3
00:00:11,700 --> 00:00:17,910
In your terminal you can see that we initialize an empty git repository in a git folder.

4
00:00:18,510 --> 00:00:25,410
When you execute the LZ a command in order to list all the contents of the folder, including hidden

5
00:00:25,410 --> 00:00:30,180
folders such as the git folder, you can see that the git folder has been created.

6
00:00:30,600 --> 00:00:36,610
Later on in the course, I'll talk more about what Kit actually does and the contents of the git folder.

7
00:00:36,630 --> 00:00:40,290
But for now, it's just important to understand the flow of git.

8
00:00:40,590 --> 00:00:43,080
Let's add a file to our project.

9
00:00:43,170 --> 00:00:47,770
It's going to be a simple text file with a very basic sentence.

10
00:00:47,790 --> 00:00:50,440
We've just made a new file and edit the text.

11
00:00:50,460 --> 00:00:52,710
This is a beautiful story to it.

12
00:00:52,890 --> 00:00:58,530
I'm proud of my creation and I want to make sure that I save the current state the project is in.

13
00:00:58,530 --> 00:01:02,280
So I'm going to save that to my local git repository.

14
00:01:03,050 --> 00:01:09,200
Now that we've added the text file, let's see if get saw that I made a change, although we haven't

15
00:01:09,200 --> 00:01:10,610
done anything with it yet.

16
00:01:10,610 --> 00:01:17,870
We initialized a git repository in this project so git knows all of our files and their changes.

17
00:01:18,230 --> 00:01:23,000
You can see the status of git by executing the git status command.

18
00:01:23,820 --> 00:01:27,600
Let's see step by step what this output actually means.

19
00:01:29,230 --> 00:01:31,720
First on branch master.

20
00:01:31,810 --> 00:01:34,180
We haven't covered branches yet.

21
00:01:34,210 --> 00:01:40,240
However, Git allows you to work on your code and have multiple states of your code base.

22
00:01:40,510 --> 00:01:46,690
Your default branch is the master branch as we haven't made any new branches yet.

23
00:01:46,690 --> 00:01:49,270
We're still on the default master branch.

24
00:01:51,040 --> 00:01:52,540
No commits yet.

25
00:01:52,630 --> 00:01:59,050
Storing changes in our local git repository is called committing with every commit.

26
00:01:59,050 --> 00:02:04,570
We save the current state of the repository and show the changes that we made to it.

27
00:02:05,250 --> 00:02:06,630
We haven't done so yet.

28
00:02:06,630 --> 00:02:09,810
So there are no commits yet, as Gib tells us.

29
00:02:11,190 --> 00:02:12,690
Untracked files.

30
00:02:12,690 --> 00:02:15,140
These are the files that get nose off.

31
00:02:15,150 --> 00:02:18,180
However, we haven't told yet what to do with them.

32
00:02:18,180 --> 00:02:22,710
We haven't told it yet that we want to add it to our local repository, for example.

33
00:02:22,710 --> 00:02:25,950
So they're still untracked right now.

34
00:02:25,950 --> 00:02:28,680
We haven't told yet what to do with the new story.

35
00:02:28,680 --> 00:02:30,330
One txt file.

36
00:02:30,480 --> 00:02:35,280
It might be that we don't want to add that story to our local repository at all.

37
00:02:35,970 --> 00:02:38,400
However, I want to commit my change.

38
00:02:38,670 --> 00:02:44,010
Before we can commit a file, we first have to put it in the staging area.

39
00:02:44,700 --> 00:02:48,930
We can put it in the staging area with a good ad command.

40
00:02:49,020 --> 00:02:54,090
You run the get ad command with the files that we want to add to the staging area.

41
00:02:54,360 --> 00:02:59,070
In this case, I want to add the story OneNote text file to the staging area.

42
00:02:59,070 --> 00:03:03,290
So I execute git add story OneNote txt.

43
00:03:03,450 --> 00:03:04,380
Perfect.

44
00:03:04,620 --> 00:03:06,900
Now it's time to commit our change.

45
00:03:07,110 --> 00:03:12,420
A commit records the change of a repository compared to its previous state.

46
00:03:13,300 --> 00:03:16,780
In this case, we didn't have any previous commits.

47
00:03:16,780 --> 00:03:23,260
So the addition of the file story, one text is a change compared to its previous state.

48
00:03:24,700 --> 00:03:31,300
In order to commit the files that are currently in the staging area, we run the Git Command AM command

49
00:03:31,300 --> 00:03:36,430
with a useful message right after the RM is a flick from message.

50
00:03:36,980 --> 00:03:42,590
When you make a commit, it's very good practice to summarize the change that you just made in a very

51
00:03:42,590 --> 00:03:43,850
short sentence.

52
00:03:44,180 --> 00:03:50,210
This way you can easily track down when you made certain changes and your teammates also know what you've

53
00:03:50,210 --> 00:03:50,960
been doing.

54
00:03:51,110 --> 00:03:56,090
In this case, I'm committing my first story, so I'm going to add the message.

55
00:03:56,090 --> 00:03:57,680
Added First story.

56
00:03:58,680 --> 00:04:01,710
We just created our very first commit.

57
00:04:01,860 --> 00:04:09,270
The changes have been saved and we can reset our project to this exact state at any point in the future.

