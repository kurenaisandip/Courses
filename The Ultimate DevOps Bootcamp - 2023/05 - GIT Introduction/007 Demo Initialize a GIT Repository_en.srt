1
00:00:01,870 --> 00:00:03,610
Hello and welcome to this demo.

2
00:00:05,540 --> 00:00:07,580
This is an optional demo.

3
00:00:07,880 --> 00:00:12,140
In most cases, you should be able to just go straight from the lecture to the labs.

4
00:00:12,140 --> 00:00:17,990
But in case you need a bit more hand-holding and need to see things in action, then you may follow

5
00:00:17,990 --> 00:00:18,740
this demo.

6
00:00:19,100 --> 00:00:22,730
In this demo we will focus on the different stages.

7
00:00:22,790 --> 00:00:25,430
A file can be in your working area.

8
00:00:25,820 --> 00:00:29,000
So let's start by creating a new file named story.

9
00:00:29,000 --> 00:00:29,930
One txt.

10
00:00:29,960 --> 00:00:38,510
So I already have a git repository initialized in the story block directory and we're going to create

11
00:00:38,510 --> 00:00:42,920
a new file named story one txt with some sample contents.

12
00:00:43,730 --> 00:00:50,720
Now, when a file is created for the first time, it is always in the working area in the untracked

13
00:00:50,720 --> 00:00:51,470
state.

14
00:00:51,890 --> 00:00:58,700
If we feel that the story is ready to be committed, we can add the story to the staging area using

15
00:00:58,700 --> 00:01:00,410
the Git ad command.

16
00:01:00,710 --> 00:01:08,120
When you now run the git status command, we see that it is green and it is in a state named changes

17
00:01:08,120 --> 00:01:09,060
to be committed.

18
00:01:09,080 --> 00:01:11,780
That means it's in a staging state.

19
00:01:11,780 --> 00:01:17,060
It's in the staging area and then we commit it using the git commit command.

20
00:01:17,540 --> 00:01:24,530
Now before committing git needs to know who you are because all commits are recorded by the name of

21
00:01:24,530 --> 00:01:25,340
an author.

22
00:01:25,340 --> 00:01:33,950
So you must use the git config command with the username and user email properties to set the username

23
00:01:33,950 --> 00:01:36,680
and email address of that user.

24
00:01:37,010 --> 00:01:43,280
When you type git commit command without any options, git opens a text editor whichever is the default

25
00:01:43,280 --> 00:01:50,570
text editor configured is usually the VI editor and here you provide a message, a commit message.

26
00:01:50,750 --> 00:01:58,010
Every commit needs to have a meaningful message that tells exactly what that commit does.

27
00:01:58,010 --> 00:01:59,120
Very briefly.

28
00:01:59,120 --> 00:02:05,900
So we go to the insert mode and we type in a message added for story and then we save and quit the editor.

29
00:02:06,230 --> 00:02:12,830
As soon as we quit, the changes are saved with the commit message we provided, which can be seen here.

30
00:02:13,100 --> 00:02:18,620
It shows the commit message and the number of files that were added or changed and the name of the file

31
00:02:18,620 --> 00:02:19,610
that was committed.

32
00:02:20,240 --> 00:02:23,120
So what exactly is a comet?

33
00:02:23,270 --> 00:02:27,770
A comet stores a copy of the file in its current state.

34
00:02:28,530 --> 00:02:31,080
One file or a set of files that were committed.

35
00:02:31,080 --> 00:02:37,290
So it saves a copy of the entire file or a set of files within the Git folder.

36
00:02:37,710 --> 00:02:44,430
Our work is now safe even if the file gets corrupted or we made some changes to it that we were not

37
00:02:44,430 --> 00:02:45,270
supposed to.

38
00:02:45,300 --> 00:02:49,740
We can restore the saved or committed version of the file later.

39
00:02:50,010 --> 00:02:54,000
So how exactly does it save and in what format does it save?

40
00:02:54,000 --> 00:02:54,740
All of that?

41
00:02:54,750 --> 00:02:59,200
We will discuss towards the end of this course in a lecture named Understanding Git.

42
00:02:59,220 --> 00:03:07,500
For now, just know that with each commit get internally stored a copy of all the files that were committed.

43
00:03:07,650 --> 00:03:13,170
Now if we run the Git status command, we see that the working area is clean.

44
00:03:13,410 --> 00:03:19,410
The next time the file is modified, it moves into a modified state.

45
00:03:26,140 --> 00:03:31,840
The previous version of file, which was committed is still as is in the previous commit history.

46
00:03:31,960 --> 00:03:36,400
It is the current version of the file that's now in a modified state.

47
00:03:36,430 --> 00:03:42,640
If this change was accidental, then we could restore the previous version of the file from the previous

48
00:03:42,640 --> 00:03:46,940
commit by running the Git restore command as it is shown here.

49
00:03:46,960 --> 00:03:52,570
So when you do that, the current version of the file is updated with the contents of the file from

50
00:03:52,570 --> 00:03:53,890
the previous commit.

51
00:03:54,010 --> 00:04:00,790
Now, since there are no changes between the current and the previous commit, now the working area

52
00:04:00,790 --> 00:04:02,740
is now clean again.

53
00:04:03,130 --> 00:04:09,550
Now let's say we knowingly updated the file and then we are ready to commit the changes again.

54
00:04:09,550 --> 00:04:16,269
And this time we follow the same process of staging the file using the Git ad command and then committing

55
00:04:16,269 --> 00:04:18,279
it using the git commit command.

56
00:04:18,430 --> 00:04:25,630
However, this time we will use the option git commit WM to pass in the commit message.

57
00:04:25,780 --> 00:04:31,360
This way we can avoid going into the text editor and then typing in the message and then coming out

58
00:04:31,360 --> 00:04:32,580
of the text editor.

59
00:04:32,590 --> 00:04:33,100
Right.

60
00:04:33,250 --> 00:04:41,290
So we will save with the message updated first story and now git creates a new commit and stores a new

61
00:04:41,290 --> 00:04:45,070
copy of the current version of the story in that comment.

62
00:04:45,100 --> 00:04:51,460
The previous version we committed earlier and the current version of the file lives in gets commit history

63
00:04:51,460 --> 00:04:57,880
forever, allowing us to go back in time to any previous date or commit and look at the story at that

64
00:04:57,880 --> 00:04:58,420
time.

65
00:04:59,110 --> 00:05:07,240
Now let's say we modify story one text like last time, but we also added a new story story to text.

66
00:05:08,820 --> 00:05:16,320
If we check the status now we see that story to txt is an untracked state as as expected and story one

67
00:05:16,980 --> 00:05:18,780
is in a modified state.

68
00:05:19,600 --> 00:05:22,960
If we wish to, we could stage and commit them together.

69
00:05:22,960 --> 00:05:29,680
So running the git ad dot command will stage both of these files at once and then running the git commit

70
00:05:29,680 --> 00:05:33,010
command will commit both of these files in git.

71
00:05:33,160 --> 00:05:38,140
So our new commit now has a copy of both the files we committed.

72
00:05:38,870 --> 00:05:45,950
In large projects, a single commit may have many, many such files and get what store a copy of all

73
00:05:45,950 --> 00:05:48,200
the files changed on that comet.

74
00:05:48,590 --> 00:05:49,640
Now, that's okay.

75
00:05:49,640 --> 00:05:53,720
If all the changes were made as part of the same requirement.

76
00:05:53,720 --> 00:06:00,950
So, for example, if multiple files were changed as part of a bug fix or feature ad operation, then

77
00:06:00,950 --> 00:06:02,720
this is completely okay.

78
00:06:02,870 --> 00:06:11,420
In this example, if both of these stories say we're part of a single series of story and say we are

79
00:06:11,420 --> 00:06:20,210
adding a character to the story who should also be part of the second story, then those are a related

80
00:06:20,210 --> 00:06:21,440
change, right?

81
00:06:21,530 --> 00:06:23,660
So they should be part of the same comment.

82
00:06:23,690 --> 00:06:30,500
However, say these stories were completely independent so they are not related and these should be

83
00:06:30,500 --> 00:06:31,940
separate commits.

84
00:06:32,600 --> 00:06:38,240
So let's go back to the previous date where story two was added and story one was updated.

85
00:06:38,420 --> 00:06:41,570
And in this case we have two files in our working area.

86
00:06:41,570 --> 00:06:44,060
We don't have to commit them together.

87
00:06:44,390 --> 00:06:50,660
That's why we have the staging area to allow us to stage them separately and commit them.

88
00:06:50,900 --> 00:06:58,100
Remember, only files in the staging area are committed, so we could first just stage story one text

89
00:06:58,100 --> 00:07:02,420
alone and then commit it with a message updated for story.

90
00:07:02,420 --> 00:07:09,050
And then we could stage story two and then commit that separately as story to text.

91
00:07:12,480 --> 00:07:17,820
So why is it important to commit separate changes separately?

92
00:07:18,150 --> 00:07:24,420
One of the best practice to be followed while committing is to make each commit atomic meaning.

93
00:07:24,420 --> 00:07:31,920
Each commit should be to solve a single problem or implement a specific feature or improvement.

94
00:07:32,100 --> 00:07:35,580
Each commit should have a single set of change.

95
00:07:35,670 --> 00:07:37,870
Now, it doesn't mean a single file.

96
00:07:37,890 --> 00:07:44,010
It could be multiple files, but it should be solving a single set of change.

97
00:07:44,130 --> 00:07:51,330
In this example, we can see that Sarah added a front page and Max fixed buttons in navigation and page

98
00:07:51,330 --> 00:07:52,800
added a subtitle.

99
00:07:52,980 --> 00:07:56,620
These are good because all of their commits do one thing.

100
00:07:56,640 --> 00:07:59,220
However, take a look at this example.

101
00:07:59,220 --> 00:08:05,160
This is a bad example because each commit has multiple sets of changes made.

102
00:08:05,190 --> 00:08:08,370
Sarah added the front page and also fixed the bug.

103
00:08:08,370 --> 00:08:09,540
But what bug?

104
00:08:09,630 --> 00:08:12,240
Does it have anything to do with the front page?

105
00:08:12,390 --> 00:08:17,150
Max fixed buttons in the navigation bar and also added a subtitle.

106
00:08:17,160 --> 00:08:22,740
The buttons in the navigation bar and the subtitle have nothing to do with each other, so they shouldn't

107
00:08:22,740 --> 00:08:25,270
be part of the same commit page.

108
00:08:25,290 --> 00:08:28,200
Fixed a few bugs and made minor improvements.

109
00:08:28,440 --> 00:08:30,590
What bugs and what improvements?

110
00:08:30,600 --> 00:08:33,840
And Max made two commits to solve the same bug.

111
00:08:34,169 --> 00:08:36,000
That's a bad practice too.

112
00:08:36,090 --> 00:08:41,850
A commit was made to update the JavaScript file to fix a button bug and another comment was made to

113
00:08:41,850 --> 00:08:44,910
update the CSS file to fix the same bug.

114
00:08:44,940 --> 00:08:51,060
They're both related to the same issue and so they should have been part of a single commit.

115
00:08:51,240 --> 00:08:55,590
So why is it important to follow this best practice and to be atomic?

116
00:08:55,950 --> 00:09:02,400
One advantage is that it maintains a clean history for the project and one that makes sense.

117
00:09:02,520 --> 00:09:04,170
While working with a large team.

118
00:09:04,170 --> 00:09:10,110
You'll have thousands of developers and hundreds of frequent commits and you can read the commit history

119
00:09:10,110 --> 00:09:14,160
and figure out exactly what that commit was for.

120
00:09:14,340 --> 00:09:21,720
Another advantage is that Git being a version control system allows you to go back in time and revert

121
00:09:21,720 --> 00:09:23,140
a particular commit.

122
00:09:23,160 --> 00:09:30,780
For instance, say we realized that the subtitle added by page resulted in a new bug on the website

123
00:09:30,780 --> 00:09:35,820
and we can easily revert that commit alone and restore the state of the website.

124
00:09:36,300 --> 00:09:37,640
And how to do that?

125
00:09:37,650 --> 00:09:40,040
We'll discuss that in one of the upcoming lectures.

126
00:09:40,050 --> 00:09:43,740
But for now I just know that that is a possibility with Git.

127
00:09:44,250 --> 00:09:50,700
However, in the other example, if we tried to revert the commit that added the subtitle, we would

128
00:09:50,700 --> 00:09:55,040
also be reverting the fixes applied on the button in the navigation bar.

129
00:09:55,050 --> 00:09:57,690
But we do not want to revert those changes.

130
00:09:57,690 --> 00:10:00,740
We only want to revert the change on the subtitle.

131
00:10:00,750 --> 00:10:08,910
So it's always recommended to keep your commits atomic and name your commits with a message that tells

132
00:10:08,910 --> 00:10:11,520
exactly what that commit does.

133
00:10:14,200 --> 00:10:17,980
Now let's say we add a new line, a line for two story one.

134
00:10:17,980 --> 00:10:21,220
And as expected, it's now in a modified state.

135
00:10:21,400 --> 00:10:28,210
And then we stage that using the git add command and we can see that it is now staged for commit.

136
00:10:28,780 --> 00:10:33,100
Now, before committing, let's say we make another change to the file.

137
00:10:33,100 --> 00:10:36,820
Say we accidentally overrode the contents of the file.

138
00:10:37,530 --> 00:10:40,590
Now, if you check the status now we see that story.

139
00:10:40,590 --> 00:10:44,250
One is staged and also modified.

140
00:10:44,460 --> 00:10:45,730
So why is that?

141
00:10:45,750 --> 00:10:48,990
Why is the same file in two different stages?

142
00:10:49,200 --> 00:10:55,910
Well, when you stage a file in Git, it caches the state of file when it was staged.

143
00:10:55,920 --> 00:11:02,280
Meaning even before we commit a file where we know an entire copy of the file is saved, as soon as

144
00:11:02,550 --> 00:11:07,390
a file is staged, a copy of the file is preserved or cached as well.

145
00:11:07,410 --> 00:11:10,200
So as soon as you stage a file, you're safe.

146
00:11:10,290 --> 00:11:17,130
In this case, I can restore the state of the file when it was staged using the Git restore option.

147
00:11:18,530 --> 00:11:23,390
So now we have restored the file to the state that it was in when we last staged it.

148
00:11:31,030 --> 00:11:32,910
Let's look at another example.

149
00:11:32,920 --> 00:11:39,310
Say in the current state, we have story one in the staging area and we update story two now.

150
00:11:39,910 --> 00:11:43,570
Story two is now in a modified state while story one is staged.

151
00:11:44,020 --> 00:11:51,460
So let's say we want to stage and commit the changes to story two first before we actually commit story

152
00:11:51,460 --> 00:11:51,960
one.

153
00:11:51,970 --> 00:11:57,880
So we basically need to move story one out of the staging area and then move story two into the staging

154
00:11:57,880 --> 00:11:58,420
area.

155
00:11:58,510 --> 00:11:59,890
So how do we do that?

156
00:12:00,070 --> 00:12:06,820
Now we can remove a file from the staging area using the command given here, which is git restored

157
00:12:06,970 --> 00:12:09,550
dash dash staged option.

158
00:12:09,700 --> 00:12:14,200
So we run the gate, restore story one the command with the staged option.

159
00:12:14,320 --> 00:12:19,120
So now both story one and story two are in a modified state.

160
00:12:19,120 --> 00:12:25,240
We took story one out of the staging area and then we will now move story two to the staging area and

161
00:12:25,240 --> 00:12:29,470
then commit it by running the Git ad command and the Git command command.

162
00:12:38,590 --> 00:12:40,060
Now let's look at another use case.

163
00:12:40,060 --> 00:12:46,420
Let's say we add a personal file called notes txt, where we decide to store our ideas.

164
00:12:46,990 --> 00:12:51,670
Now, this file is now in an untracked state as it's a new file.

165
00:12:52,150 --> 00:13:00,310
Now, while staging the modified story one txt file, we accidentally add the node's file as well because

166
00:13:00,310 --> 00:13:02,470
we ran the git add dot command.

167
00:13:02,710 --> 00:13:08,620
Now if you check the status, we see that both these files are staged and if we do a commit now, both

168
00:13:08,620 --> 00:13:10,370
of these files would be committed.

169
00:13:10,390 --> 00:13:15,990
However, we don't want notes to be part of the git repository.

170
00:13:16,000 --> 00:13:19,900
It's a personal file that we're going to use to store our ideas.

171
00:13:19,960 --> 00:13:25,570
So we can remove a tracked file by running the git arm command.

172
00:13:25,630 --> 00:13:27,970
Now you must specify a file name.

173
00:13:27,970 --> 00:13:37,420
In our case, it is not txt and you also must specify one of the options either cached or false.

174
00:13:37,660 --> 00:13:45,340
Now, specifying the cached option will retain the file in our directory and the force option will delete

175
00:13:45,340 --> 00:13:47,020
the file permanently.

176
00:13:47,230 --> 00:13:53,200
In this case, I have written down some ideas for the story in my node's file, so I don't want to delete

177
00:13:53,200 --> 00:13:53,320
it.

178
00:13:53,320 --> 00:13:58,360
I want to keep the file even if it is removed from the gits tracking.

179
00:13:58,360 --> 00:14:03,190
So I will use the cached option while removing the file from git.

180
00:14:03,810 --> 00:14:08,310
Now, if you see now we're back to the previous date where the file is still in our directory.

181
00:14:08,310 --> 00:14:13,680
And when we run the Git status command, we see that it's in an untracked state.

182
00:14:13,950 --> 00:14:20,970
So this is good, but it's not very good because there are chances that we might accidentally check

183
00:14:20,970 --> 00:14:24,930
in this file with Kit and as we just did before.

184
00:14:25,020 --> 00:14:32,760
So to instruct, get to permanently ignore this file, we use a dot git ignore file.

185
00:14:32,970 --> 00:14:37,870
We add the name of the file to a new file called dot git ignore.

186
00:14:37,890 --> 00:14:43,530
And now in the git status command we do not see the noticed file anymore.

187
00:14:43,560 --> 00:14:51,410
However, we do see the dot git ignore file because that is also a file that git sees as a new file.

188
00:14:51,420 --> 00:14:58,200
So it is a recommended practice to save the git ignore file itself in git so that when you share the

189
00:14:58,200 --> 00:15:05,940
repository with others, the team can add commonly ignored files to this file such as the cache directories,

190
00:15:05,940 --> 00:15:10,890
log directories, build temporary build files, etc..

191
00:15:10,980 --> 00:15:11,400
Right.

192
00:15:11,790 --> 00:15:12,480
So.

193
00:15:12,480 --> 00:15:13,860
Well, that's it for now.

194
00:15:14,580 --> 00:15:18,480
Head over to the labs and practice this by yourself.

